Index: laborBackend-admin/src/main/java/com/yuantu/web/controller/labor/EmpTrainController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.yuantu.web.controller.labor;\r\n\r\nimport com.yuantu.common.annotation.Excel;\r\nimport com.yuantu.common.annotation.Log;\r\nimport com.yuantu.common.core.controller.BaseController;\r\nimport com.yuantu.common.core.domain.AjaxResult;\r\nimport com.yuantu.common.core.domain.model.LoginUser;\r\nimport com.yuantu.common.core.page.TableDataInfo;\r\nimport com.yuantu.common.enums.BusinessType;\r\nimport com.yuantu.common.utils.poi.ExcelUtil;\r\nimport com.yuantu.labor.domain.EmpTrain;\r\nimport com.yuantu.labor.domain.Employee;\r\nimport com.yuantu.labor.domain.TrainProject;\r\nimport com.yuantu.labor.service.IEmpTrainService;\r\nimport com.yuantu.labor.service.IEmployeeService;\r\nimport com.yuantu.labor.service.ITrainProjectService;\r\nimport com.yuantu.labor.vo.*;\r\nimport io.swagger.annotations.Api;\r\nimport io.swagger.annotations.ApiOperation;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.security.access.prepost.PreAuthorize;\r\nimport org.springframework.util.CollectionUtils;\r\nimport org.springframework.util.ReflectionUtils;\r\nimport org.springframework.web.bind.annotation.*;\r\nimport org.springframework.web.multipart.MultipartFile;\r\n\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport java.lang.reflect.Field;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n/**\r\n * 培训记录Controller\r\n * \r\n * @author ruoyi\r\n * @date 2023-09-22\r\n */\r\n@Api(\"培训记录管理\")\r\n@RestController\r\n@RequestMapping(\"/labor/train\")\r\npublic class EmpTrainController extends BaseController\r\n{\r\n    @Autowired\r\n    private IEmpTrainService empTrainService;\r\n    @Autowired\r\n    private IEmployeeService employeeService;\r\n\r\n    @Autowired\r\n    private ITrainProjectService trainProjectService;\r\n    /**\r\n     * 查询培训记录列表\r\n     */\r\n\r\n    @ApiOperation(\"查询培训记录列表\")\r\n    @PreAuthorize(\"@ss.hasPermi('labor:train:list')\")\r\n    @GetMapping(\"/list\")\r\n    public TableDataInfo list(EmpTrain empTrain)\r\n    {\r\n        startPage();\r\n        List<EmpTrain> list = empTrainService.selectEmpTrainList(empTrain);\r\n        return getDataTable(list);\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * 获取培训记录详细信息\r\n     */\r\n    @ApiOperation(\"获取培训记录详细信息\")\r\n    @PreAuthorize(\"@ss.hasPermi('labor:train:query')\")\r\n    @GetMapping(value = \"/getInfo/{trainId}\")\r\n    public AjaxResult getInfo(@PathVariable(\"trainId\") Integer trainId)\r\n    {\r\n        return success(empTrainService.selectEmpTrainByTrainId(trainId));\r\n    }\r\n\r\n    /**\r\n     * 新增培训记录\r\n     */\r\n    @ApiOperation(\"新增培训记录\")\r\n    @PreAuthorize(\"@ss.hasPermi('labor:train:add')\")\r\n    @Log(title = \"培训记录\", businessType = BusinessType.INSERT)\r\n    @PostMapping(\"/add\")\r\n    public AjaxResult add(@RequestBody EmpTrain empTrain)\r\n    {\r\n\r\n        //补充人员名称和身份证数据\r\n        Employee emp = employeeService.selectEmployeeByEmpId(empTrain.getTrainEmpId());\r\n        empTrain.setTrainEmpName(emp.getEmpName());\r\n        empTrain.setTrainEmpIdcard(emp.getEmpIdcard());\r\n\r\n        //补充培训项目名称\r\n        TrainProject project = trainProjectService.selectTrainProjectByProjectId(empTrain.getTrainProjectId());\r\n        empTrain.setTrainProjectName(project.getProjectName());\r\n\r\n\r\n        //判断是否唯一\r\n        int result = empTrainService.checkEmpTrainUnique(empTrain);\r\n        //System.out.println(\"*********************result=\"+result);\r\n        if(result>0){\r\n            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\r\n            String timeTemp = sdf.format(empTrain.getTrainBeginTime());\r\n            return error(\"新增'\" + empTrain.getTrainEmpName() + \"'参加的'\"+empTrain.getTrainProjectName()+\"'的培训失败，在开始时间为\"+timeTemp+\"的培训记录已经存在\");\r\n        }\r\n\r\n        String username = getUsername();\r\n        return toAjax(empTrainService.insertEmpTrain(empTrain,username));\r\n    }\r\n\r\n    /**\r\n     * 修改培训记录\r\n     */\r\n\r\n    @ApiOperation(\"修改培训记录\")\r\n    @PreAuthorize(\"@ss.hasPermi('labor:train:edit')\")\r\n    @Log(title = \"培训记录\", businessType = BusinessType.UPDATE)\r\n    @PutMapping(\"/edit\")\r\n    public AjaxResult edit(@RequestBody EmpTrain empTrain)\r\n    {\r\n        //补充人员名称和身份证数据\r\n        Employee emp = employeeService.selectEmployeeByEmpId(empTrain.getTrainEmpId());\r\n        empTrain.setTrainEmpName(emp.getEmpName());\r\n        empTrain.setTrainEmpIdcard(emp.getEmpIdcard());\r\n        //补充培训项目名称\r\n        TrainProject project = trainProjectService.selectTrainProjectByProjectId(empTrain.getTrainProjectId());\r\n        empTrain.setTrainProjectName(project.getProjectName());\r\n\r\n\r\n        int result = empTrainService.checkEmpTrainUnique(empTrain);\r\n\r\n        if(result>0){\r\n            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\r\n            String timeTemp = sdf.format(empTrain.getTrainBeginTime());\r\n            return error(\"修改'\" + empTrain.getTrainEmpName() + \"'参加的'\"+empTrain.getTrainProjectName()+\"'的培训失败，在开始时间为\"+timeTemp+\"的培训记录已经存在\");\r\n        }\r\n        String username = getUsername();\r\n        return toAjax(empTrainService.updateEmpTrain(empTrain,username));\r\n    }\r\n\r\n    /**\r\n     * 删除培训记录\r\n     */\r\n    @ApiOperation(\"删除培训记录\")\r\n    @PreAuthorize(\"@ss.hasPermi('labor:train:remove')\")\r\n    @Log(title = \"培训记录\", businessType = BusinessType.DELETE)\r\n\t@DeleteMapping(\"/remove/{trainIds}\")\r\n    public AjaxResult remove(@PathVariable Integer[] trainIds)\r\n    {\r\n        return toAjax(empTrainService.deleteEmpTrainByTrainIds(trainIds));\r\n    }\r\n\r\n    /**\r\n     * 根据条件查询培训记录列表\r\n     * 培训性质:projectNature;\r\n     * 所属公司:trainWorkUnitsName;\r\n     * 劳务公司:trainHrCompanyName;\r\n     * 培训项目:trainProjectName;\r\n     * 学时:minTrainPeriod,maxTrainPeriod;\r\n     * 培训费用(元):minTrainFee,maxTrainFee;\r\n     * 培训地址/方式:trainAddrMethod;\r\n     * 开始时间：trainBeginTime;\r\n     * 结束时间:trainEndTime;\r\n     * 考核方式（考评、考试）：trainExamMethod;\r\n     * 姓名：trainEmpName;\r\n     * 身份证号：trainEmpIdcard;\r\n     * 开始修改时间：beginUpdateTime;\r\n     * 结束修改时间：endUpdateTime;\r\n     * @param queryVO\r\n     * @return\r\n     */\r\n    @ApiOperation(\"根据条件查询培训记录列表\")\r\n    @PreAuthorize(\"@ss.hasPermi('labor:train:query')\")\r\n    @GetMapping(\"/queryTrain\")\r\n    public TableDataInfo queryTrain(EmpTrainQueryVO queryVO)\r\n    {\r\n        startPage();\r\n        List<EmpTrainResultVO> list = empTrainService.selectEmpTrainListByWhere(queryVO);\r\n        return getDataTable(list);\r\n    }\r\n    @ApiOperation(\"初始化新增页面，返回员工列表，培训项目列表，所属公司和劳务公司列表\")\r\n    @PreAuthorize(\"@ss.hasPermi('labor:train:query')\")\r\n    @GetMapping(\"/initAdd\")\r\n    public  AjaxResult initAdd(){\r\n\r\n        //取得员工列表\r\n        EmployeeInfoVO infoVO = new EmployeeInfoVO();\r\n        List<String> statusList = new ArrayList<>();\r\n        statusList.add(\"1\");\r\n        statusList.add(\"2\");\r\n        statusList.add(\"5\");\r\n        statusList.add(\"6\");\r\n        statusList.add(\"7\");\r\n        infoVO.setEmpStatusList(statusList);\r\n        List<EmpNameCardVO>  empNameCardList = employeeService.selectEmpNameAndCard(infoVO);\r\n\r\n        //取得培训项目列表\r\n        List<TrainProject>  projectList = trainProjectService.selectTrainProjectList(new TrainProject());\r\n\r\n        AjaxResult ajax = AjaxResult.success();\r\n        ajax.put(\"projectData\",projectList);\r\n        ajax.put(\"empNameCardData\",empNameCardList);\r\n        return ajax;\r\n    }\r\n\r\n    @ApiOperation(\"初始化修改页面，返回员工数据，培训项目列表，所属公司和劳务公司列表\")\r\n    @PreAuthorize(\"@ss.hasPermi('labor:train:query')\")\r\n    @GetMapping(\"/initEdit/{empId}\")\r\n    public AjaxResult initEdit(@PathVariable(\"empId\") Integer empId){\r\n\r\n        //取得员工数据\r\n        EmpTrain empTrain = empTrainService.selectEmpTrainByTrainId(empId);\r\n\r\n        //取得培训项目列表\r\n        List<TrainProject>  projectList = trainProjectService.selectTrainProjectList(new TrainProject());\r\n\r\n        AjaxResult ajax = AjaxResult.success();\r\n        ajax.put(\"projectData\",projectList);\r\n        ajax.put(\"empTrainData\",empTrain);\r\n        return ajax;\r\n    }\r\n\r\n    /**\r\n     * 查询培训记录的统计数据，按照员工，培训性质，所属公司，劳务公司四个条件分组\r\n     * @param queryVO\r\n     * @return\r\n     */\r\n    @ApiOperation(\"查询培训记录统计表，按照员工，培训性质，所属公司，劳务公司四个条件分组\")\r\n    @PreAuthorize(\"@ss.hasPermi('labor:train:query')\")\r\n    @GetMapping(\"/counting\")\r\n    public AjaxResult counting(EmpTrainQueryVO queryVO)\r\n    {\r\n        startPage();\r\n        List<EmpTrainCountVO> list = empTrainService.selectEmpTrainCounting(queryVO);\r\n        AjaxResult result = AjaxResult.success();\r\n        String fee = empTrainService.countTrainFee(queryVO);\r\n        if(fee==null){\r\n            result.put(\"countFee\",0);\r\n        }else{\r\n            result.put(\"countFee\",fee);\r\n        }\r\n        Integer period = empTrainService.countTrainPeriod(queryVO);\r\n        if(period ==null){\r\n            result.put(\"cuontPeriod\",0);\r\n        }else{\r\n            result.put(\"cuontPeriod\",period);\r\n        }\r\n        result.put(\"dataTable\",getDataTable(list));\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * totalCount:统计总人次\r\n     * totalFee:统计培训费用\r\n     * totalProject:统计培训项目总数\r\n     * totalProject:培训总学时\r\n     * examMethodPieChart:培训完成饼图\r\n     * @param queryVO\r\n     * @return\r\n     */\r\n    @ApiOperation(\"查询统计总人数，统计培训费用，统计培训项目总数，培训总学时，培训完成饼图\")\r\n    //@PreAuthorize(\"@ss.hasPermi('labor:train:query')\")\r\n    @GetMapping(\"/trainCounting\")\r\n    public AjaxResult trainCount(EmpTrainQueryVO queryVO)\r\n    {\r\n        AjaxResult result = AjaxResult.success();\r\n        EmpTrainTotalVO totalVO = empTrainService.selectEmpTrainCountByMonth(queryVO);\r\n        if(totalVO!=null) {\r\n            //统计总人数\r\n            result.put(\"totalCount\",totalVO.getTotalCount());\r\n\r\n            //统计培训费用\r\n            result.put(\"totalFee\",totalVO.getTotalFee());\r\n\r\n            //统计培训项目总数\r\n            result.put(\"totalProject\",totalVO.getTotalProject());\r\n\r\n            //培训总学时\r\n            result.put(\"totalPeriod\",totalVO.getTotalPeriod());\r\n        }else{\r\n            result.put(\"totalCount\",0);\r\n\r\n            result.put(\"totalFee\",0);\r\n\r\n            result.put(\"totalProject\",0);\r\n\r\n            result.put(\"totalPeriod\",0);\r\n        }\r\n\r\n        //培训完成饼图\r\n        List<PieChartVO> chartVOs = empTrainService.countTrainExamMethod(queryVO);\r\n        result.put(\"examMethodPieChart\",chartVOs);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 下载模板\r\n     * @param response\r\n     */\r\n    @ApiOperation(value = \"下载员工培训记录模板\")\r\n    //@PreAuthorize(\"@ss.hasPermi('labor:train:import')\")\r\n    @GetMapping(\"/excel/download\")\r\n    public void downloadExcel(HttpServletResponse response) {\r\n        try {\r\n            trainProjectService.downloadExcel(response,\"empTrain.xlsx\");\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 导入数据\r\n     * @param file\r\n     * @return\r\n     */\r\n    @ApiOperation(\"导入员工培训记录数据\")\r\n    //@PreAuthorize(\"@ss.hasPermi('labor:train:import')\")\r\n    @PostMapping(\"/importData\")\r\n    public AjaxResult importData(MultipartFile file) {\r\n        LoginUser loginUser = getLoginUser();\r\n        return success(empTrainService.importEmpTrainData(file, loginUser));\r\n    }\r\n    /**\r\n     * 导出员工列表\r\n     */\r\n    @ApiOperation(\"直接导出员工培训信息\")\r\n    //@PreAuthorize(\"@ss.hasPermi('labor:train:export')\")\r\n    @Log(title = \"培训项目\", businessType = BusinessType.EXPORT)\r\n    @PostMapping(\"/export\")\r\n    public void export(HttpServletResponse response, @RequestBody EmpTrainExportVO empTrainExport) {\r\n        List<EmpTrainResultVO> list = empTrainService.selectEmpTrainExportInfos(empTrainExport);\r\n        ExcelUtil<EmpTrainResultVO> util = new ExcelUtil<>(EmpTrainResultVO.class);\r\n        Field[] declaredFields = EmpTrainResultVO.class.getDeclaredFields();\r\n        List<String> fieldNamesWithExcel = new ArrayList<>();\r\n        for (Field field : declaredFields) {\r\n            ReflectionUtils.makeAccessible(field);\r\n            if (field.isAnnotationPresent(Excel.class)) {\r\n                fieldNamesWithExcel.add(field.getName());\r\n            }\r\n        }\r\n        List<String> excludeFieldNames = new ArrayList<>();\r\n        List<String> fieldNames = empTrainExport.getFieldNames();\r\n\r\n        if(fieldNames!=null && fieldNames.size()>0) {\r\n            for (String s : fieldNamesWithExcel) {\r\n                if (!fieldNames.contains(s)) {\r\n                    excludeFieldNames.add(s);\r\n                }\r\n            }\r\n            if (!CollectionUtils.isEmpty(excludeFieldNames)) {\r\n                String[] excludeArr = new String[excludeFieldNames.size()];\r\n                excludeFieldNames.toArray(excludeArr);\r\n                util.hideColumn(excludeArr);\r\n            }\r\n        }\r\n\r\n\r\n        util.exportExcel(response, list, \"员工培训数据\");\r\n    }\r\n\r\n\r\n    /**\r\n     * 表格拆分导出员工信息\r\n     */\r\n    @ApiOperation(\"表格拆分导出员工培训信息\")\r\n    //@PreAuthorize(\"@ss.hasPermi('labor:train:export')\")\r\n    @Log(title = \"培训项目\", businessType = BusinessType.EXPORT)\r\n    @PostMapping(\"/export/divide\")\r\n    public void exportDivide(HttpServletResponse response, @RequestBody EmpTrainExportDivideVO empTrainExportDivide) {\r\n        empTrainService.exportDivide(response, empTrainExportDivide);\r\n    }\r\n\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/laborBackend-admin/src/main/java/com/yuantu/web/controller/labor/EmpTrainController.java b/laborBackend-admin/src/main/java/com/yuantu/web/controller/labor/EmpTrainController.java
--- a/laborBackend-admin/src/main/java/com/yuantu/web/controller/labor/EmpTrainController.java	(revision 7a40e7adb432a3d192c13c79c524e2abe1edc9df)
+++ b/laborBackend-admin/src/main/java/com/yuantu/web/controller/labor/EmpTrainController.java	(date 1700040902853)
@@ -170,7 +170,7 @@
      * @return
      */
     @ApiOperation("根据条件查询培训记录列表")
-    @PreAuthorize("@ss.hasPermi('labor:train:query')")
+    //@PreAuthorize("@ss.hasPermi('labor:train:query')")
     @GetMapping("/queryTrain")
     public TableDataInfo queryTrain(EmpTrainQueryVO queryVO)
     {
Index: laborBackend-framework/src/main/java/com/yuantu/framework/config/SecurityConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.yuantu.framework.config;\r\n\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.http.HttpMethod;\r\nimport org.springframework.security.authentication.AuthenticationManager;\r\nimport org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\r\nimport org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;\r\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\r\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\r\nimport org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer;\r\nimport org.springframework.security.config.http.SessionCreationPolicy;\r\nimport org.springframework.security.core.userdetails.UserDetailsService;\r\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\r\nimport org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;\r\nimport org.springframework.security.web.authentication.logout.LogoutFilter;\r\nimport org.springframework.web.filter.CorsFilter;\r\nimport com.yuantu.framework.config.properties.PermitAllUrlProperties;\r\nimport com.yuantu.framework.security.filter.JwtAuthenticationTokenFilter;\r\nimport com.yuantu.framework.security.handle.AuthenticationEntryPointImpl;\r\nimport com.yuantu.framework.security.handle.LogoutSuccessHandlerImpl;\r\n\r\n/**\r\n * spring security配置\r\n * \r\n * @author ruoyi\r\n */\r\n@EnableGlobalMethodSecurity(prePostEnabled = true, securedEnabled = true)\r\npublic class SecurityConfig extends WebSecurityConfigurerAdapter\r\n{\r\n    /**\r\n     * 自定义用户认证逻辑\r\n     */\r\n    @Autowired\r\n    private UserDetailsService userDetailsService;\r\n    \r\n    /**\r\n     * 认证失败处理类\r\n     */\r\n    @Autowired\r\n    private AuthenticationEntryPointImpl unauthorizedHandler;\r\n\r\n    /**\r\n     * 退出处理类\r\n     */\r\n    @Autowired\r\n    private LogoutSuccessHandlerImpl logoutSuccessHandler;\r\n\r\n    /**\r\n     * token认证过滤器\r\n     */\r\n    @Autowired\r\n    private JwtAuthenticationTokenFilter authenticationTokenFilter;\r\n    \r\n    /**\r\n     * 跨域过滤器\r\n     */\r\n    @Autowired\r\n    private CorsFilter corsFilter;\r\n\r\n    /**\r\n     * 允许匿名访问的地址\r\n     */\r\n    @Autowired\r\n    private PermitAllUrlProperties permitAllUrl;\r\n\r\n    /**\r\n     * 解决 无法直接注入 AuthenticationManager\r\n     *\r\n     * @return\r\n     * @throws Exception\r\n     */\r\n    @Bean\r\n    @Override\r\n    public AuthenticationManager authenticationManagerBean() throws Exception\r\n    {\r\n        return super.authenticationManagerBean();\r\n    }\r\n\r\n    /**\r\n     * anyRequest          |   匹配所有请求路径\r\n     * access              |   SpringEl表达式结果为true时可以访问\r\n     * anonymous           |   匿名可以访问\r\n     * denyAll             |   用户不能访问\r\n     * fullyAuthenticated  |   用户完全认证可以访问（非remember-me下自动登录）\r\n     * hasAnyAuthority     |   如果有参数，参数表示权限，则其中任何一个权限可以访问\r\n     * hasAnyRole          |   如果有参数，参数表示角色，则其中任何一个角色可以访问\r\n     * hasAuthority        |   如果有参数，参数表示权限，则其权限可以访问\r\n     * hasIpAddress        |   如果有参数，参数表示IP地址，如果用户IP和参数匹配，则可以访问\r\n     * hasRole             |   如果有参数，参数表示角色，则其角色可以访问\r\n     * permitAll           |   用户可以任意访问\r\n     * rememberMe          |   允许通过remember-me登录的用户访问\r\n     * authenticated       |   用户登录后可访问\r\n     */\r\n    @Override\r\n    protected void configure(HttpSecurity httpSecurity) throws Exception\r\n    {\r\n        // 注解标记允许匿名访问的url\r\n        ExpressionUrlAuthorizationConfigurer<HttpSecurity>.ExpressionInterceptUrlRegistry registry = httpSecurity.authorizeRequests();\r\n        permitAllUrl.getUrls().forEach(url -> registry.antMatchers(url).permitAll());\r\n\r\n        httpSecurity\r\n                // CSRF禁用，因为不使用session\r\n                .csrf().disable()\r\n                // 禁用HTTP响应标头\r\n                .headers().cacheControl().disable().and()\r\n                // 认证失败处理类\r\n                .exceptionHandling().authenticationEntryPoint(unauthorizedHandler).and()\r\n                // 基于token，所以不需要session\r\n                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and()\r\n                // 过滤请求\r\n                .authorizeRequests()\r\n                // 对于登录login 注册register 验证码captchaImage 允许匿名访问\r\n                .antMatchers(\"/login\", \"/register\", \"/captchaImage\").permitAll()\r\n                // 静态资源，可匿名访问\r\n                .antMatchers(HttpMethod.GET, \"/\", \"/*.html\", \"/**/*.html\", \"/**/*.css\", \"/**/*.js\", \"/profile/**\").permitAll()\r\n                .antMatchers(\"/swagger-ui.html\", \"/swagger-resources/**\", \"/webjars/**\", \"/*/api-docs\", \"/druid/**\").permitAll()\r\n              //  .antMatchers(\"/labor/**\").permitAll()\r\n                // 除上面外的所有请求全部需要鉴权认证\r\n                .anyRequest().authenticated()\r\n                .and()\r\n                .headers().frameOptions().disable();\r\n        // 添加Logout filter\r\n        httpSecurity.logout().logoutUrl(\"/logout\").logoutSuccessHandler(logoutSuccessHandler);\r\n        // 添加JWT filter\r\n        httpSecurity.addFilterBefore(authenticationTokenFilter, UsernamePasswordAuthenticationFilter.class);\r\n        // 添加CORS filter\r\n        httpSecurity.addFilterBefore(corsFilter, JwtAuthenticationTokenFilter.class);\r\n        httpSecurity.addFilterBefore(corsFilter, LogoutFilter.class);\r\n    }\r\n\r\n    /**\r\n     * 强散列哈希加密实现\r\n     */\r\n    @Bean\r\n    public BCryptPasswordEncoder bCryptPasswordEncoder()\r\n    {\r\n        return new BCryptPasswordEncoder();\r\n    }\r\n\r\n    /**\r\n     * 身份认证接口\r\n     */\r\n    @Override\r\n    protected void configure(AuthenticationManagerBuilder auth) throws Exception\r\n    {\r\n        auth.userDetailsService(userDetailsService).passwordEncoder(bCryptPasswordEncoder());\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/laborBackend-framework/src/main/java/com/yuantu/framework/config/SecurityConfig.java b/laborBackend-framework/src/main/java/com/yuantu/framework/config/SecurityConfig.java
--- a/laborBackend-framework/src/main/java/com/yuantu/framework/config/SecurityConfig.java	(revision 7a40e7adb432a3d192c13c79c524e2abe1edc9df)
+++ b/laborBackend-framework/src/main/java/com/yuantu/framework/config/SecurityConfig.java	(date 1700040927100)
@@ -115,7 +115,7 @@
                 // 静态资源，可匿名访问
                 .antMatchers(HttpMethod.GET, "/", "/*.html", "/**/*.html", "/**/*.css", "/**/*.js", "/profile/**").permitAll()
                 .antMatchers("/swagger-ui.html", "/swagger-resources/**", "/webjars/**", "/*/api-docs", "/druid/**").permitAll()
-              //  .antMatchers("/labor/**").permitAll()
+                .antMatchers("/labor/**").permitAll()
                 // 除上面外的所有请求全部需要鉴权认证
                 .anyRequest().authenticated()
                 .and()
