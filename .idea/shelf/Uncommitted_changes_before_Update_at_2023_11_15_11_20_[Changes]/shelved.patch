Index: laborBackend-labor/src/main/java/com/yuantu/labor/vo/TrainProjectExcelVO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/laborBackend-labor/src/main/java/com/yuantu/labor/vo/TrainProjectExcelVO.java b/laborBackend-labor/src/main/java/com/yuantu/labor/vo/TrainProjectExcelVO.java
new file mode 100644
--- /dev/null	(date 1699954142727)
+++ b/laborBackend-labor/src/main/java/com/yuantu/labor/vo/TrainProjectExcelVO.java	(date 1699954142727)
@@ -0,0 +1,48 @@
+package com.yuantu.labor.vo;
+
+import cn.afterturn.easypoi.excel.annotation.Excel;
+import com.alibaba.excel.annotation.ExcelProperty;
+import com.alibaba.excel.annotation.write.style.ColumnWidth;
+import com.alibaba.excel.annotation.write.style.HeadFontStyle;
+import com.alibaba.excel.annotation.write.style.HeadRowHeight;
+import lombok.Data;
+
+import javax.validation.constraints.NotBlank;
+
+@Data
+@HeadRowHeight(15)
+@HeadFontStyle(color = 80,fontName = "黑体", fontHeightInPoints=10)
+@ColumnWidth(20)
+public class TrainProjectExcelVO {
+    /** 培训项目名称 */
+    @ExcelProperty("培训项目名称")
+    private String projectName;
+
+    /** 主要培训内容/课程 */
+    @ExcelProperty("主要培训内容/课程")
+    private String projectContent;
+
+    /** 年度 */
+    @ExcelProperty("年度")
+    private String projectYear;
+
+    /** 责任部门名称 */
+    @ExcelProperty("单位名称-部门名称")
+    private String projectDeptName;
+
+    /** 培训性质(1=管理，2=技能，3=技术） */
+    @ExcelProperty("培训性质")
+    private String projectNature;
+
+    /** 培训方式(1=内培, 2=外培) */
+    @ExcelProperty("培训方式")
+    private String projectMethod;
+
+    /** 项目分类(1=一类，2=二类，3=三类) */
+    @ExcelProperty("项目分类")
+    private String projectClassify;
+
+    /** 是否完成 */
+    @ExcelProperty("是否完成")
+    private String projectIsfinish;
+}
Index: laborBackend-framework/src/main/java/com/yuantu/framework/config/SecurityConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.yuantu.framework.config;\r\n\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.http.HttpMethod;\r\nimport org.springframework.security.authentication.AuthenticationManager;\r\nimport org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\r\nimport org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;\r\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\r\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\r\nimport org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer;\r\nimport org.springframework.security.config.http.SessionCreationPolicy;\r\nimport org.springframework.security.core.userdetails.UserDetailsService;\r\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\r\nimport org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;\r\nimport org.springframework.security.web.authentication.logout.LogoutFilter;\r\nimport org.springframework.web.filter.CorsFilter;\r\nimport com.yuantu.framework.config.properties.PermitAllUrlProperties;\r\nimport com.yuantu.framework.security.filter.JwtAuthenticationTokenFilter;\r\nimport com.yuantu.framework.security.handle.AuthenticationEntryPointImpl;\r\nimport com.yuantu.framework.security.handle.LogoutSuccessHandlerImpl;\r\n\r\n/**\r\n * spring security配置\r\n * \r\n * @author ruoyi\r\n */\r\n@EnableGlobalMethodSecurity(prePostEnabled = true, securedEnabled = true)\r\npublic class SecurityConfig extends WebSecurityConfigurerAdapter\r\n{\r\n    /**\r\n     * 自定义用户认证逻辑\r\n     */\r\n    @Autowired\r\n    private UserDetailsService userDetailsService;\r\n    \r\n    /**\r\n     * 认证失败处理类\r\n     */\r\n    @Autowired\r\n    private AuthenticationEntryPointImpl unauthorizedHandler;\r\n\r\n    /**\r\n     * 退出处理类\r\n     */\r\n    @Autowired\r\n    private LogoutSuccessHandlerImpl logoutSuccessHandler;\r\n\r\n    /**\r\n     * token认证过滤器\r\n     */\r\n    @Autowired\r\n    private JwtAuthenticationTokenFilter authenticationTokenFilter;\r\n    \r\n    /**\r\n     * 跨域过滤器\r\n     */\r\n    @Autowired\r\n    private CorsFilter corsFilter;\r\n\r\n    /**\r\n     * 允许匿名访问的地址\r\n     */\r\n    @Autowired\r\n    private PermitAllUrlProperties permitAllUrl;\r\n\r\n    /**\r\n     * 解决 无法直接注入 AuthenticationManager\r\n     *\r\n     * @return\r\n     * @throws Exception\r\n     */\r\n    @Bean\r\n    @Override\r\n    public AuthenticationManager authenticationManagerBean() throws Exception\r\n    {\r\n        return super.authenticationManagerBean();\r\n    }\r\n\r\n    /**\r\n     * anyRequest          |   匹配所有请求路径\r\n     * access              |   SpringEl表达式结果为true时可以访问\r\n     * anonymous           |   匿名可以访问\r\n     * denyAll             |   用户不能访问\r\n     * fullyAuthenticated  |   用户完全认证可以访问（非remember-me下自动登录）\r\n     * hasAnyAuthority     |   如果有参数，参数表示权限，则其中任何一个权限可以访问\r\n     * hasAnyRole          |   如果有参数，参数表示角色，则其中任何一个角色可以访问\r\n     * hasAuthority        |   如果有参数，参数表示权限，则其权限可以访问\r\n     * hasIpAddress        |   如果有参数，参数表示IP地址，如果用户IP和参数匹配，则可以访问\r\n     * hasRole             |   如果有参数，参数表示角色，则其角色可以访问\r\n     * permitAll           |   用户可以任意访问\r\n     * rememberMe          |   允许通过remember-me登录的用户访问\r\n     * authenticated       |   用户登录后可访问\r\n     */\r\n    @Override\r\n    protected void configure(HttpSecurity httpSecurity) throws Exception\r\n    {\r\n        // 注解标记允许匿名访问的url\r\n        ExpressionUrlAuthorizationConfigurer<HttpSecurity>.ExpressionInterceptUrlRegistry registry = httpSecurity.authorizeRequests();\r\n        permitAllUrl.getUrls().forEach(url -> registry.antMatchers(url).permitAll());\r\n\r\n        httpSecurity\r\n                // CSRF禁用，因为不使用session\r\n                .csrf().disable()\r\n                // 禁用HTTP响应标头\r\n                .headers().cacheControl().disable().and()\r\n                // 认证失败处理类\r\n                .exceptionHandling().authenticationEntryPoint(unauthorizedHandler).and()\r\n                // 基于token，所以不需要session\r\n                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and()\r\n                // 过滤请求\r\n                .authorizeRequests()\r\n                // 对于登录login 注册register 验证码captchaImage 允许匿名访问\r\n                .antMatchers(\"/login\", \"/register\", \"/captchaImage\").permitAll()\r\n                // 静态资源，可匿名访问\r\n                .antMatchers(HttpMethod.GET, \"/\", \"/*.html\", \"/**/*.html\", \"/**/*.css\", \"/**/*.js\", \"/profile/**\").permitAll()\r\n                .antMatchers(\"/swagger-ui.html\", \"/swagger-resources/**\", \"/webjars/**\", \"/*/api-docs\", \"/druid/**\").permitAll()\r\n              //  .antMatchers(\"/labor/**\").permitAll()\r\n                // 除上面外的所有请求全部需要鉴权认证\r\n                .anyRequest().authenticated()\r\n                .and()\r\n                .headers().frameOptions().disable();\r\n        // 添加Logout filter\r\n        httpSecurity.logout().logoutUrl(\"/logout\").logoutSuccessHandler(logoutSuccessHandler);\r\n        // 添加JWT filter\r\n        httpSecurity.addFilterBefore(authenticationTokenFilter, UsernamePasswordAuthenticationFilter.class);\r\n        // 添加CORS filter\r\n        httpSecurity.addFilterBefore(corsFilter, JwtAuthenticationTokenFilter.class);\r\n        httpSecurity.addFilterBefore(corsFilter, LogoutFilter.class);\r\n    }\r\n\r\n    /**\r\n     * 强散列哈希加密实现\r\n     */\r\n    @Bean\r\n    public BCryptPasswordEncoder bCryptPasswordEncoder()\r\n    {\r\n        return new BCryptPasswordEncoder();\r\n    }\r\n\r\n    /**\r\n     * 身份认证接口\r\n     */\r\n    @Override\r\n    protected void configure(AuthenticationManagerBuilder auth) throws Exception\r\n    {\r\n        auth.userDetailsService(userDetailsService).passwordEncoder(bCryptPasswordEncoder());\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/laborBackend-framework/src/main/java/com/yuantu/framework/config/SecurityConfig.java b/laborBackend-framework/src/main/java/com/yuantu/framework/config/SecurityConfig.java
--- a/laborBackend-framework/src/main/java/com/yuantu/framework/config/SecurityConfig.java	(revision 9409dde4d1e31f9d2410d53e57ff0b8daf3ca9b3)
+++ b/laborBackend-framework/src/main/java/com/yuantu/framework/config/SecurityConfig.java	(date 1699954142720)
@@ -116,6 +116,20 @@
                 .antMatchers(HttpMethod.GET, "/", "/*.html", "/**/*.html", "/**/*.css", "/**/*.js", "/profile/**").permitAll()
                 .antMatchers("/swagger-ui.html", "/swagger-resources/**", "/webjars/**", "/*/api-docs", "/druid/**").permitAll()
               //  .antMatchers("/labor/**").permitAll()
+                .antMatchers("/labor/salaryhis/**").permitAll()
+                .antMatchers("/labor/stability/**").permitAll()
+                .antMatchers("/labor/project/**").permitAll()
+                .antMatchers("/labor/worker/**").permitAll()
+                .antMatchers("/labor/resume/**").permitAll()
+                .antMatchers("/labor/expert/**").permitAll()
+                .antMatchers("/labor/welbud/**").permitAll()
+                .antMatchers("/labor/salary/**").permitAll()
+                .antMatchers("/labor/info/**").permitAll()
+                .antMatchers("/labor/train/**").permitAll()
+                .antMatchers("/labor/effectiveness/**").permitAll()
+                .antMatchers("/labor/employee/**").permitAll()
+                .antMatchers("/labor/budget/**").permitAll()
+                .antMatchers("/labor/materials/**").permitAll()
                 // 除上面外的所有请求全部需要鉴权认证
                 .anyRequest().authenticated()
                 .and()
Index: laborBackend-labor/src/main/java/com/yuantu/labor/service/impl/TrainProjectServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.yuantu.labor.service.impl;\r\n\r\nimport cn.afterturn.easypoi.excel.ExcelExportUtil;\r\nimport cn.afterturn.easypoi.excel.ExcelImportUtil;\r\nimport cn.afterturn.easypoi.excel.entity.ExportParams;\r\nimport cn.afterturn.easypoi.excel.entity.ImportParams;\r\nimport cn.afterturn.easypoi.excel.entity.enmus.ExcelType;\r\nimport cn.afterturn.easypoi.excel.entity.result.ExcelImportResult;\r\nimport com.yuantu.common.annotation.Excel;\r\nimport com.yuantu.common.core.domain.entity.SysDictData;\r\nimport com.yuantu.common.exception.ServiceException;\r\nimport com.yuantu.common.utils.bean.BeanUtils;\r\nimport com.yuantu.common.utils.file.FileUtils;\r\nimport com.yuantu.common.utils.poi.ExcelUtil;\r\nimport com.yuantu.labor.cenum.FileImportStatusEnum;\r\nimport com.yuantu.labor.cenum.FileTypeEnum;\r\nimport com.yuantu.labor.cenum.ImportFileTypeEnum;\r\nimport com.yuantu.labor.domain.Department;\r\nimport com.yuantu.labor.domain.FileImportRecord;\r\nimport com.yuantu.labor.domain.TrainProject;\r\nimport com.yuantu.labor.handler.TrainProjectExcelImportVerifyHandler;\r\nimport com.yuantu.labor.mapper.DepartmentMapper;\r\nimport com.yuantu.labor.mapper.FileImportRecordMapper;\r\nimport com.yuantu.labor.mapper.TrainProjectMapper;\r\nimport com.yuantu.labor.service.ITrainProjectService;\r\nimport com.yuantu.labor.vo.*;\r\nimport com.yuantu.system.mapper.SysDictDataMapper;\r\nimport org.apache.poi.ss.usermodel.Workbook;\r\nimport org.apache.poi.ss.usermodel.WorkbookFactory;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.core.io.ClassPathResource;\r\nimport org.springframework.stereotype.Service;\r\nimport org.springframework.util.CollectionUtils;\r\nimport org.springframework.util.ReflectionUtils;\r\nimport org.springframework.web.multipart.MultipartFile;\r\n\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.lang.reflect.Field;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Date;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.stream.Collectors;\r\n\r\n/**\r\n * 培训项目Service业务层处理\r\n *\r\n * @author ruoyi\r\n * @date 2023-09-14\r\n */\r\n@Service\r\npublic class TrainProjectServiceImpl implements ITrainProjectService {\r\n    @Autowired\r\n    private TrainProjectMapper trainProjectMapper;\r\n    @Autowired\r\n    private FileImportRecordMapper fileImportRecordMapper;\r\n    @Autowired\r\n    private TrainProjectExcelImportVerifyHandler trainProjectExcelImportVerifyHandler;\r\n    @Autowired\r\n    private DepartmentMapper departmentMapper;\r\n\r\n    @Autowired\r\n    private FileService fileService;\r\n    private static final Logger log = LoggerFactory.getLogger(TrainProjectServiceImpl.class);\r\n    @Autowired\r\n    private SysDictDataMapper sysDictDataMapper;\r\n\r\n    /**\r\n     * 查询培训项目\r\n     *\r\n     * @param projectId 培训项目主键\r\n     * @return 培训项目\r\n     */\r\n    @Override\r\n    public TrainProject selectTrainProjectByProjectId(Integer projectId) {\r\n        return trainProjectMapper.selectTrainProjectByProjectId(projectId);\r\n    }\r\n\r\n    /**\r\n     * 查询培训项目列表\r\n     *\r\n     * @param trainProject 培训项目\r\n     * @return 培训项目\r\n     */\r\n    @Override\r\n    public List<TrainProject> selectTrainProjectList(TrainProject trainProject) {\r\n        return trainProjectMapper.selectTrainProjectList(trainProject);\r\n    }\r\n\r\n    /**\r\n     * 新增培训项目\r\n     *\r\n     * @param trainProject 培训项目\r\n     * @return 结果\r\n     */\r\n    @Override\r\n    public int insertTrainProject(TrainProject trainProject, String username) {\r\n        Date now = new Date();\r\n        trainProject.setCreateTime(now);\r\n        trainProject.setCreateBy(username);\r\n        trainProject.setProjectUpdateTime(now);\r\n        return trainProjectMapper.insertTrainProject(trainProject);\r\n    }\r\n\r\n    /**\r\n     * 将导入的行对象添加到数据库中\r\n     *\r\n     * @param trainProject\r\n     * @param username\r\n     * @return\r\n     */\r\n    public int insertTrainProjectFromExcel(TrainProject trainProject, String username) {\r\n        //根据年度和项目名称查找数据库\r\n        Date now = new Date();\r\n        trainProject.setCreateTime(now);\r\n        trainProject.setCreateBy(username);\r\n        trainProject.setProjectUpdateTime(now);\r\n        trainProject.setUpdateBy(username);\r\n        trainProject.setUpdateTime(now);\r\n        //设置查询条件项目名\r\n        TrainProject queryProject = new TrainProject();\r\n        queryProject.setProjectName(trainProject.getProjectName());\r\n\r\n        List<TrainProject> resultProjects = trainProjectMapper.selectTrainProjectList(queryProject);\r\n        int result = 0;\r\n        if (resultProjects != null && resultProjects.size() > 0) {\r\n            TrainProject oldProject = resultProjects.get(0);\r\n            trainProject.setProjectId(oldProject.getProjectId());\r\n            result = trainProjectMapper.updateTrainProject(trainProject);\r\n        } else {\r\n\r\n            //如果没有就新增\r\n            result = trainProjectMapper.insertTrainProject(trainProject);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 修改培训项目\r\n     *\r\n     * @param trainProject 培训项目\r\n     * @return 结果\r\n     */\r\n    @Override\r\n    public int updateTrainProject(TrainProject trainProject, String username) {\r\n\r\n        Date now = new Date();\r\n        trainProject.setUpdateTime(now);\r\n        trainProject.setProjectUpdateTime(now);\r\n        trainProject.setUpdateBy(username);\r\n        return trainProjectMapper.updateTrainProject(trainProject);\r\n    }\r\n\r\n    /**\r\n     * 批量删除培训项目\r\n     *\r\n     * @param projectIds 需要删除的培训项目主键\r\n     * @return 结果\r\n     */\r\n    @Override\r\n    public int deleteTrainProjectByProjectIds(Integer[] projectIds) {\r\n        return trainProjectMapper.deleteTrainProjectByProjectIds(projectIds);\r\n    }\r\n\r\n    /**\r\n     * 删除培训项目信息\r\n     *\r\n     * @param projectId 培训项目主键\r\n     * @return 结果\r\n     */\r\n    @Override\r\n    public int deleteTrainProjectByProjectId(Integer projectId) {\r\n        return trainProjectMapper.deleteTrainProjectByProjectId(projectId);\r\n    }\r\n\r\n    @Override\r\n    public int checkProjectUnique(TrainProject trainProject) {\r\n        return trainProjectMapper.checkProjectUnique(trainProject);\r\n    }\r\n\r\n    @Override\r\n    public void downloadExcel(HttpServletResponse response, String path) {\r\n        InputStream inputStream = null;\r\n        try {\r\n            ClassPathResource classPathResource = new ClassPathResource(\"static/\" + path);\r\n            inputStream = classPathResource.getInputStream();\r\n            ExcelUtil.downLoadExcel(\"data\", response, WorkbookFactory.create(inputStream));\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        } finally {\r\n            if (inputStream != null) {\r\n                try {\r\n                    inputStream.close();\r\n                } catch (IOException e) {\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public ImportResultVO uploadTrainProjectFile(MultipartFile multipartFile, Long userId, String username) {\r\n        Date now = new Date();\r\n        //实例化FileImportRecord导入记录对象,通用代码\r\n        FileImportRecord fileImportRecord = new FileImportRecord();\r\n        fileImportRecord.setSuccessCount(0);\r\n        fileImportRecord.setFailureCount(0);\r\n        fileImportRecord.setTotalCount(0);\r\n        fileImportRecord.setDisabled(false);\r\n        fileImportRecord.setFileType(ImportFileTypeEnum.SEVEN.getKey());\r\n        fileImportRecord.setImportStatus(FileImportStatusEnum.DURING.getKey());\r\n        fileImportRecord.setCreatorId(userId);\r\n        fileImportRecord.setCreatedTime(now);\r\n        //先创建数据库导入记录\r\n        fileImportRecordMapper.insertFileImportRecord(fileImportRecord);\r\n\r\n        SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd*HH:mm:ss\");\r\n\r\n        String nowStr = dateFormat.format(now);\r\n\r\n\r\n        ExcelImportResult<TrainProjectImportVO> excelDate = getExcelDate(multipartFile, TrainProjectImportVO.class);\r\n\r\n        //\r\n        List<ErrorForm> failReport = excelDate.getFailList().stream()\r\n                .map(entity -> {\r\n                    int line = entity.getRowNum() == null ? 0 : entity.getRowNum() + 1;\r\n                    return new ErrorForm(line, entity.getErrorMsg());\r\n                }).collect(Collectors.toList());\r\n\r\n        //批量导入数据到表中\r\n        if (!CollectionUtils.isEmpty(excelDate.getList())) {\r\n            batchInsertTrainProjectInfos(username, excelDate.getList());\r\n        }\r\n\r\n        //统计成功和失败的数量，公共\r\n        int successCount = CollectionUtils.isEmpty(excelDate.getList()) ? 0 : excelDate.getList().size();\r\n        int errorCount = CollectionUtils.isEmpty(failReport) ? 0 : failReport.size();\r\n\r\n        Long failFileId = null;\r\n        String failFileUrl = null;\r\n        fileImportRecord.setImportStatus(FileImportStatusEnum.FINISHED.getKey());\r\n        if (errorCount != 0) {\r\n            Workbook workbook = ExcelExportUtil.exportExcel(new ExportParams(\"错误信息\", \"Sheet1\", ExcelType.XSSF),\r\n                    ErrorForm.class, failReport);\r\n            //上传附件\r\n            MultipartFile file = FileUtils.workbookToCommonsMultipartFile(workbook, multipartFile.getOriginalFilename() + \"错误信息\" + nowStr + \".xlsx\");\r\n            if (file != null) {\r\n                FileVO failFileInfo = fileService.upLoadEmpFile(FileTypeEnum.TRAIN_PROJECT_FAIL_INFO.getKey(), \"trainProject\", file, username);\r\n                failFileId = failFileInfo.getFileId();\r\n                failFileUrl = failFileInfo.getFileUrl();\r\n            }\r\n            if (successCount == 0) {\r\n                fileImportRecord.setImportStatus(FileImportStatusEnum.FAIL.getKey());\r\n            }\r\n        }\r\n        Long empInfoFileId = fileService.upLoadEmpFile(FileTypeEnum.TRAIN_PROJECT_INFO.getKey(), \"trainProject\", multipartFile, username).getFileId();\r\n        //更新导入记录\r\n        fileImportRecord.setSuccessCount(successCount);\r\n        fileImportRecord.setFailureCount(errorCount);\r\n        fileImportRecord.setTotalCount(successCount + errorCount);\r\n        fileImportRecord.setOriginFileId(empInfoFileId);\r\n        fileImportRecord.setFailFileId(failFileId);\r\n        fileImportRecordMapper.updateFileImportRecord(fileImportRecord);\r\n        //返回导入记录\r\n        ImportResultVO importResult = new ImportResultVO();\r\n        importResult.setTotalCount(successCount + errorCount);\r\n        importResult.setSuccessCount(successCount);\r\n        importResult.setErrorCount(errorCount);\r\n        importResult.setFailFileId(failFileId);\r\n        importResult.setFailFileUrl(failFileUrl);\r\n\r\n        return importResult;\r\n\r\n    }\r\n\r\n\r\n    private ExcelImportResult<TrainProjectImportVO> getExcelDate(MultipartFile file, Class<TrainProjectImportVO> trainProjectImportClass) {\r\n\r\n        try {\r\n            //ImportParams对象用于存放导入过程参数\r\n            ImportParams params = new ImportParams();\r\n            params.setHeadRows(1);\r\n            params.setTitleRows(0);\r\n            params.setNeedVerify(true);\r\n            //Excel单元格数据是否规范校验\r\n            params.setVerifyHandler(trainProjectExcelImportVerifyHandler);\r\n            return ExcelImportUtil.importExcelMore(file.getInputStream(), trainProjectImportClass, params);\r\n        } catch (Exception e) {\r\n            log.error(\"获取excel数据失败\", e);\r\n            throw new ServiceException(\"获取excel数据失败\");\r\n        } finally {\r\n            // 清除threadLocal 防止内存泄漏\r\n            ThreadLocal<List<TrainProjectCheckVO>> threadLocal = trainProjectExcelImportVerifyHandler.getThreadLocal();\r\n            if (threadLocal != null) {\r\n                threadLocal.remove();\r\n            }\r\n        }\r\n    }\r\n\r\n    private void batchInsertTrainProjectInfos(String userName, List<TrainProjectImportVO> projectImportInfos) {\r\n\r\n        for (TrainProjectImportVO projectImportInfo : projectImportInfos) {\r\n            TrainProject project = transformTrainProjectImportInfoToProjectAdd(projectImportInfo);\r\n            insertTrainProjectFromExcel(project, userName);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 生成要增加到数据库的表对象，处理部门和各个字典值\r\n     *\r\n     * @param projectImportVO\r\n     * @return\r\n     */\r\n    private TrainProject transformTrainProjectImportInfoToProjectAdd(TrainProjectImportVO projectImportVO) {\r\n\r\n        TrainProject projectNew = new TrainProject();\r\n        BeanUtils.copyProperties(projectImportVO, projectNew);\r\n        List<SysDictData> trainNatureList = sysDictDataMapper.selectDictDataByType(\"train_nature\");\r\n\r\n        //取‘培训方式‘的字典值\r\n        List<SysDictData> trainMethonList = sysDictDataMapper.selectDictDataByType(\"train_method\");\r\n        //取‘项目分类‘的字典值\r\n        List<SysDictData> projectClassifyList = sysDictDataMapper.selectDictDataByType(\"project_classify\");\r\n        //取‘是否完成‘的字典值\r\n        List<SysDictData> isFinishList = sysDictDataMapper.selectDictDataByType(\"project_isfinish\");\r\n\r\n        projectNew.setProjectNature(trainNatureList.stream().filter(s -> s.getDictLabel().equals(projectImportVO.getProjectNature())).findFirst().get().getDictValue());\r\n        projectNew.setProjectMethod(trainMethonList.stream().filter(s -> s.getDictLabel().equals(projectImportVO.getProjectMethod())).findFirst().get().getDictValue());\r\n        projectNew.setProjectClassify(projectClassifyList.stream().filter(s -> s.getDictLabel().equals(projectImportVO.getProjectClassify())).findFirst().get().getDictValue());\r\n        projectNew.setProjectIsfinish(isFinishList.stream().filter(s -> s.getDictLabel().equals(projectImportVO.getProjectIsfinish())).findFirst().get().getDictValue());\r\n\r\n        String empUnitDeptName = projectImportVO.getProjectDeptName();\r\n        String[] split = empUnitDeptName.split(\"-\");\r\n        Department department = null;\r\n        if (split != null && split.length == 2){\r\n            String empUnit = split[0];\r\n            String empDept = split[1];\r\n            department = departmentMapper.findDepartmentInfoByUnitAndDeptName(empUnit, empDept);\r\n        }else{\r\n            department = departmentMapper.findDepartmentInfoByName(empUnitDeptName);\r\n        }\r\n        if (department != null) {\r\n            projectNew.setProjectDeptId(department.getDeptId().intValue());\r\n            projectNew.setProjectDeptName(department.getDeptName());\r\n        }\r\n        return projectNew;\r\n    }\r\n\r\n\r\n    @Override\r\n    public List<TrainProject> selectTrainProjectExportInfos(TrainProjectExportVO vo) {\r\n        List<Integer> list = vo.getProjectIds();\r\n        TrainProject project = new TrainProject();\r\n\r\n        if (list != null && list.size() > 0) {\r\n            Integer[] projectIds = new Integer[list.size()];\r\n            list.toArray(projectIds);\r\n            project.setProjectIds(projectIds);\r\n        }\r\n        List<TrainProject> loanWorkerInfos = trainProjectMapper.selectTrainProjectList(project);\r\n        //字典值转换\r\n        //取‘培训性质‘的字典值\r\n        List<SysDictData> trainNatureList = sysDictDataMapper.selectDictDataByType(\"train_nature\");\r\n\r\n        //取‘培训方式‘的字典值\r\n        List<SysDictData> trainMethonList = sysDictDataMapper.selectDictDataByType(\"train_method\");\r\n        //取‘项目分类‘的字典值\r\n        List<SysDictData> projectClassifyList = sysDictDataMapper.selectDictDataByType(\"project_classify\");\r\n        //取‘是否完成‘的字典值\r\n        List<SysDictData> isFinishList = sysDictDataMapper.selectDictDataByType(\"project_isfinish\");\r\n        for(TrainProject trainProject : loanWorkerInfos){\r\n            trainProject.setProjectNature(trainNatureList.stream().filter(s->s.getDictValue().equals(trainProject.getProjectNature())).findFirst().get().getDictLabel());\r\n            trainProject.setProjectMethod(trainMethonList.stream().filter(s->s.getDictValue().equals(trainProject.getProjectMethod())).findFirst().get().getDictLabel());\r\n            trainProject.setProjectClassify(projectClassifyList.stream().filter(s->s.getDictValue().equals(trainProject.getProjectClassify())).findFirst().get().getDictLabel());\r\n            trainProject.setProjectIsfinish(isFinishList.stream().filter(s->s.getDictValue().equals(trainProject.getProjectIsfinish())).findFirst().get().getDictLabel());\r\n        }\r\n        return loanWorkerInfos;\r\n    }\r\n\r\n\r\n    @Override\r\n    public void exportDivide(HttpServletResponse response, TrainProjectExportDivideVO trainProjectExportDivideVO) {\r\n        List<Integer> list = trainProjectExportDivideVO.getProjectIds();\r\n        TrainProject project = new TrainProject();\r\n\r\n        if (list != null && list.size() > 0) {\r\n            Integer[] projectIds = new Integer[list.size()];\r\n            list.toArray(projectIds);\r\n            project.setProjectIds(projectIds);\r\n        }\r\n        List<TrainProject> trainProjects = trainProjectMapper.selectTrainProjectList(project);\r\n\r\n        TrainProjectChangeDicVO empChangeDic = changeDicValue(trainProjects, trainProjectExportDivideVO.getFieldName());\r\n        trainProjects = empChangeDic.getExportInfos();\r\n        String chineseName = empChangeDic.getChineseName();\r\n\r\n        String groupByProperty = trainProjectExportDivideVO.getFieldName();\r\n        Map<String, List<TrainProject>> groupedData = trainProjects.stream()\r\n                .collect(Collectors.groupingBy(emp -> {\r\n                    try {\r\n                        // 使用反射获取指定属性的值\r\n                        Object value = emp.getClass().getMethod(\"get\" +\r\n                                groupByProperty.substring(0, 1).toUpperCase() +\r\n                                groupByProperty.substring(1)).invoke(emp);\r\n                        if(value==null){\r\n                            return \"null\";\r\n                        }\r\n                        if(value instanceof Date) {\r\n                            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\r\n                            return  sdf.format((Date) value);\r\n                        }\r\n                        return value.toString();\r\n                    } catch (Exception e) {\r\n                        e.printStackTrace();\r\n                        // 处理获取属性值异常\r\n                        return null;\r\n                    }\r\n                }));\r\n        String fieldName = trainProjectExportDivideVO.getFieldName();\r\n        List<SysDictData> dictDataInfos = dictDataMapper.findDictDataByDicTypeName(chineseName);\r\n        for (String key : groupedData.keySet()) {\r\n            List<TrainProject> exportList = groupedData.get(key);\r\n            for (TrainProject exportInfo : exportList) {\r\n                if (!CollectionUtils.isEmpty(dictDataInfos)) {\r\n                    try {\r\n                        Field field = TrainProject.class.getDeclaredField(fieldName);\r\n                        ReflectionUtils.makeAccessible(field);\r\n                        Object value = field.get(exportInfo);\r\n                        for (SysDictData dictDataInfo : dictDataInfos) {\r\n                            if (value.toString().equals(dictDataInfo.getDictLabel())) {\r\n                                field.set(exportInfo, dictDataInfo.getDictValue());\r\n                            }\r\n                        }\r\n                    } catch (Exception e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        File baseDir = new File(\"培训信息\");\r\n        for (String key : groupedData.keySet()) {\r\n            String excelName = trainProjectExportDivideVO.getExcelName();\r\n            if (excelName.contains(\"#\")) {\r\n                excelName = excelName.replace(\"#\", key);\r\n            }\r\n            File file = org.apache.commons.io.FileUtils.getFile(baseDir + File.separator + key + File.separator + excelName + \".xlsx\");\r\n            if (!file.exists()) {\r\n                file.getParentFile().mkdirs();\r\n                try {\r\n                    file.createNewFile();\r\n                } catch (IOException e) {\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n            List<TrainProject> loanWorkerInfos = groupedData.get(key);\r\n            //字典值转换\r\n            //取‘培训性质‘的字典值\r\n            List<SysDictData> trainNatureList = sysDictDataMapper.selectDictDataByType(\"train_nature\");\r\n\r\n            //取‘培训方式‘的字典值\r\n            List<SysDictData> trainMethonList = sysDictDataMapper.selectDictDataByType(\"train_method\");\r\n            //取‘项目分类‘的字典值\r\n            List<SysDictData> projectClassifyList = sysDictDataMapper.selectDictDataByType(\"project_classify\");\r\n            //取‘是否完成‘的字典值\r\n            List<SysDictData> isFinishList = sysDictDataMapper.selectDictDataByType(\"project_isfinish\");\r\n            for(TrainProject trainProject : loanWorkerInfos){\r\n                //System.out.println(\"#############trainProject=\"+trainProject.toString());\r\n                trainProject.setProjectNature(trainNatureList.stream().filter(s->s.getDictValue().equals(trainProject.getProjectNature())).findFirst().get().getDictLabel());\r\n                trainProject.setProjectMethod(trainMethonList.stream().filter(s->s.getDictValue().equals(trainProject.getProjectMethod())).findFirst().get().getDictLabel());\r\n                trainProject.setProjectClassify(projectClassifyList.stream().filter(s->s.getDictValue().equals(trainProject.getProjectClassify())).findFirst().get().getDictLabel());\r\n                trainProject.setProjectIsfinish(isFinishList.stream().filter(s->s.getDictValue().equals(trainProject.getProjectIsfinish())).findFirst().get().getDictLabel());\r\n                //System.out.println(\"*************trainProject=\"+trainProject.toString());\r\n\r\n            }\r\n\r\n            ExcelUtil<TrainProject> util = new ExcelUtil<TrainProject>(TrainProject.class);\r\n            util.init(loanWorkerInfos, \"培训项目信息\", excelName, Excel.Type.EXPORT);\r\n            util.writeSheet();\r\n            Workbook wb = util.getWb();\r\n            MultipartFile multipartFile = FileUtils.workbookToCommonsMultipartFile(wb, excelName + \".xlsx\");\r\n            if (multipartFile != null) {\r\n                try (InputStream inputStream = multipartFile.getInputStream()) {\r\n                    org.apache.commons.io.FileUtils.copyInputStreamToFile(inputStream, file);\r\n                } catch (IOException e) {\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n        }\r\n        FileUtils.writeCompressedFileToResponse(response, baseDir);\r\n        FileUtils.deleteFolder(baseDir);\r\n    }\r\n\r\n    @Override\r\n    public List<TrainProject> selectTrainProjectListByQueryVO(TrainProjectQueryVO vo) {\r\n        return trainProjectMapper.selectTrainProjectListByQueryVO(vo);\r\n    }\r\n\r\n    @Autowired\r\n    private SysDictDataMapper dictDataMapper;\r\n\r\n    private TrainProjectChangeDicVO changeDicValue(List<TrainProject> trainProjects, String fieldName) {\r\n        Field[] declaredFields = TrainProject.class.getDeclaredFields();\r\n        String chineseName = null;\r\n        for (Field field : declaredFields) {\r\n            if (field.getName().equals(fieldName)) {\r\n                chineseName = field.getAnnotation(Excel.class).name();\r\n            }\r\n        }\r\n        List<SysDictData> dictDataInfos = dictDataMapper.findDictDataByDicTypeName(chineseName);\r\n        if (!CollectionUtils.isEmpty(dictDataInfos)) {\r\n            for (TrainProject exportInfo : trainProjects) {\r\n                try {\r\n                    Field field = TrainProject.class.getDeclaredField(fieldName);\r\n                    ReflectionUtils.makeAccessible(field);\r\n                    Object value = field.get(exportInfo);\r\n                    for (SysDictData dictDataInfo : dictDataInfos) {\r\n                        if (value.toString().equals(dictDataInfo.getDictValue())) {\r\n                            field.set(exportInfo, dictDataInfo.getDictLabel());\r\n                        }\r\n                    }\r\n                } catch (Exception e) {\r\n                    TrainProjectChangeDicVO empChangeDic = new TrainProjectChangeDicVO();\r\n                    empChangeDic.setChineseName(chineseName);\r\n                    empChangeDic.setExportInfos(trainProjects);\r\n                    return empChangeDic;\r\n                }\r\n            }\r\n        }\r\n        TrainProjectChangeDicVO empChangeDic = new TrainProjectChangeDicVO();\r\n        empChangeDic.setChineseName(chineseName);\r\n        empChangeDic.setExportInfos(trainProjects);\r\n        return empChangeDic;\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/laborBackend-labor/src/main/java/com/yuantu/labor/service/impl/TrainProjectServiceImpl.java b/laborBackend-labor/src/main/java/com/yuantu/labor/service/impl/TrainProjectServiceImpl.java
--- a/laborBackend-labor/src/main/java/com/yuantu/labor/service/impl/TrainProjectServiceImpl.java	(revision 9409dde4d1e31f9d2410d53e57ff0b8daf3ca9b3)
+++ b/laborBackend-labor/src/main/java/com/yuantu/labor/service/impl/TrainProjectServiceImpl.java	(date 1699954142737)
@@ -1,11 +1,21 @@
 package com.yuantu.labor.service.impl;
 
+import java.io.File;
+import java.io.IOException;
+import java.io.InputStream;
+import java.lang.reflect.Field;
+import java.net.URLEncoder;
+import java.text.SimpleDateFormat;
+import java.util.*;
+import java.util.stream.Collectors;
+
 import cn.afterturn.easypoi.excel.ExcelExportUtil;
 import cn.afterturn.easypoi.excel.ExcelImportUtil;
 import cn.afterturn.easypoi.excel.entity.ExportParams;
 import cn.afterturn.easypoi.excel.entity.ImportParams;
 import cn.afterturn.easypoi.excel.entity.enmus.ExcelType;
 import cn.afterturn.easypoi.excel.entity.result.ExcelImportResult;
+import com.alibaba.excel.EasyExcel;
 import com.yuantu.common.annotation.Excel;
 import com.yuantu.common.core.domain.entity.SysDictData;
 import com.yuantu.common.exception.ServiceException;
@@ -18,6 +28,7 @@
 import com.yuantu.labor.domain.Department;
 import com.yuantu.labor.domain.FileImportRecord;
 import com.yuantu.labor.domain.TrainProject;
+import com.yuantu.labor.handler.DropDownWriteHandler;
 import com.yuantu.labor.handler.TrainProjectExcelImportVerifyHandler;
 import com.yuantu.labor.mapper.DepartmentMapper;
 import com.yuantu.labor.mapper.FileImportRecordMapper;
@@ -503,6 +514,7 @@
         return trainProjectMapper.selectTrainProjectListByQueryVO(vo);
     }
 
+
     @Autowired
     private SysDictDataMapper dictDataMapper;
 
@@ -540,5 +552,43 @@
         return empChangeDic;
     }
 
+    @Override
+    public void downloadTrainProjectExcel(HttpServletResponse response) {
+        //1.取得字典值
+
+        //取得培训性质
+        List<String> trainNatureTypeDic = dictDataMapper.selectDictDataByType("train_nature").stream().
+                map(SysDictData::getDictLabel).collect(Collectors.toList());
+
+        //培训方式
+        List<String> trainMethodTypeDic = dictDataMapper.selectDictDataByType("train_method").stream().
+                map(SysDictData::getDictLabel).collect(Collectors.toList());
+
+        //项目分类
+        List<String> projectClassifyTypeDic = dictDataMapper.selectDictDataByType("project_classify").stream().
+                map(SysDictData::getDictLabel).collect(Collectors.toList());
 
+        // 是否完成
+        List<String> projectIsfinishTypeDic = dictDataMapper.selectDictDataByType("project_isfinish").stream().
+                map(SysDictData::getDictLabel).collect(Collectors.toList());
+
+        //2 将字典列表加入到指定的列
+        Map<Integer, List<String>> downDropMap = new HashMap<>(16);
+        downDropMap.put(4,trainNatureTypeDic);
+        downDropMap.put(5,trainMethodTypeDic);
+
+        DropDownWriteHandler downWriteHandler = new DropDownWriteHandler(downDropMap);
+        response.setContentType("application/vnd.ms-excel");
+        response.setCharacterEncoding("utf-8");
+        try {
+            String fileName = URLEncoder.encode("培训项目模板", "UTF-8");
+            response.setHeader("Content-Disposition", "attachment; filename*=UTF-8''" + fileName + ".xlsx");
+            EasyExcel.write(response.getOutputStream(), ResumeProjectExcelVO.class).
+                    registerWriteHandler(downWriteHandler).sheet("培训项目信息").doWrite(new ArrayList<>());
+        } catch (IOException e) {
+            throw new ServiceException("下载培训项目信息模板失败");
+        }
+
+
+    }
 }
