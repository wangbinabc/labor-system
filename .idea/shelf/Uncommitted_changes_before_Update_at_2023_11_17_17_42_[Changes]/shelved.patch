Index: laborBackend-admin/src/main/java/com/yuantu/web/controller/labor/TrainProjectController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.yuantu.web.controller.labor;\r\n\r\nimport com.yuantu.common.annotation.Excel;\r\nimport com.yuantu.common.annotation.Log;\r\nimport com.yuantu.common.core.controller.BaseController;\r\nimport com.yuantu.common.core.domain.AjaxResult;\r\nimport com.yuantu.common.core.domain.model.LoginUser;\r\nimport com.yuantu.common.core.page.TableDataInfo;\r\nimport com.yuantu.common.enums.BusinessType;\r\nimport com.yuantu.common.utils.poi.ExcelUtil;\r\nimport com.yuantu.labor.domain.Department;\r\nimport com.yuantu.labor.domain.TrainProject;\r\nimport com.yuantu.labor.service.IDepartmentService;\r\nimport com.yuantu.labor.service.ITrainProjectService;\r\nimport com.yuantu.labor.vo.EmpTrainQueryVO;\r\nimport com.yuantu.labor.vo.TrainProjectExportDivideVO;\r\nimport com.yuantu.labor.vo.TrainProjectExportVO;\r\nimport com.yuantu.labor.vo.TrainProjectQueryVO;\r\nimport io.swagger.annotations.Api;\r\nimport io.swagger.annotations.ApiOperation;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.security.access.prepost.PreAuthorize;\r\nimport org.springframework.util.CollectionUtils;\r\nimport org.springframework.util.ReflectionUtils;\r\nimport org.springframework.web.bind.annotation.*;\r\nimport org.springframework.web.multipart.MultipartFile;\r\n\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport java.lang.reflect.Field;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n/**\r\n * 培训项目Controller\r\n *\r\n * @author ruoyi\r\n * @date 2023-09-14\r\n */\r\n@Api(\"培训项目管理\")\r\n@RestController\r\n@RequestMapping(\"/labor/project\")\r\npublic class TrainProjectController extends BaseController {\r\n    @Autowired\r\n    private ITrainProjectService trainProjectService;\r\n\r\n\r\n    @Autowired\r\n    private IDepartmentService departmentService;\r\n\r\n    /**\r\n     * 筛选培训项目列表\r\n     * 培训项目名称:projectName;\r\n     * 主要培训内容/课程:projectContent;\r\n     * 年度:projectYear;\r\n     * 责任部门:projectDeptId;\r\n     * 责任部门名称:projectDeptName;\r\n     * 培训性质:projectNature;\r\n     * 培训方式:projectMethod;\r\n     * 项目分类:projectClassify;\r\n     * 是否完成:projectIsfinish;\r\n     * 开始修改时间:beginUpdateTime;\r\n     * 结束修改时间:endUpdateTime;\r\n     */\r\n    @ApiOperation(\"筛选条件查询培训项目列表\")\r\n    @PreAuthorize(\"@ss.hasPermi('labor:project:list')\")\r\n    @GetMapping(\"/list\")\r\n    public TableDataInfo list(TrainProjectQueryVO vo) {\r\n        startPage();\r\n        List<TrainProject> list = trainProjectService.selectTrainProjectListByQueryVO(vo);\r\n        return getDataTable(list);\r\n    }\r\n\r\n    @ApiOperation(\"根据条件查询培训项目列表\")\r\n    @PreAuthorize(\"@ss.hasPermi('labor:project:list')\")\r\n    @GetMapping(\"/queryProjects\")\r\n    public TableDataInfo queryProjects(TrainProject trainProject) {\r\n        startPage();\r\n        List<TrainProject> list = trainProjectService.selectTrainProjectList(trainProject);\r\n        return getDataTable(list);\r\n    }\r\n    @ApiOperation(\"根据月份查询培训项目列表\")\r\n    @GetMapping(\"/queryProjectByMonth\")\r\n    public TableDataInfo queryProjectByMonth(EmpTrainQueryVO vo){\r\n        startPage();\r\n        List<TrainProject> list = trainProjectService.selectTrainProjectListByMonth(vo);\r\n        return getDataTable(list);\r\n    }\r\n\r\n\r\n\r\n\r\n    /**\r\n     * 获取培训项目详细信息\r\n     */\r\n    @ApiOperation(\"根据id获取培训项目详细信息\")\r\n    @PreAuthorize(\"@ss.hasPermi('labor:project:query')\")\r\n    @GetMapping(value = \"/getInfo/{projectId}\")\r\n    public AjaxResult getInfo(@PathVariable(\"projectId\") Integer projectId) {\r\n        return success(trainProjectService.selectTrainProjectByProjectId(projectId));\r\n    }\r\n\r\n    /**\r\n     * 新增培训项目\r\n     */\r\n\r\n    @ApiOperation(\"新增培训项目\")\r\n    @PreAuthorize(\"@ss.hasPermi('labor:project:add')\")\r\n    @Log(title = \"培训项目\", businessType = BusinessType.INSERT)\r\n    @PostMapping(\"/add\")\r\n    public AjaxResult add(@RequestBody TrainProject trainProject) {\r\n        int result = trainProjectService.checkProjectUnique(trainProject);\r\n        if (result > 0) {\r\n            return error(\"增加'\" + trainProject.getProjectName() + \"'失败，项目名称已经存在\");\r\n        } else {\r\n            if (trainProject.getProjectDeptName() == null) {\r\n                Department dept = departmentService.selectDepartmentByDeptId(new Long(trainProject.getProjectDeptId()));\r\n                trainProject.setProjectDeptName(dept.getDeptName());\r\n            }\r\n            String username = getUsername();\r\n            return toAjax(trainProjectService.insertTrainProject(trainProject, username));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 修改培训项目\r\n     */\r\n    @ApiOperation(\"修改培训项目\")\r\n    @PreAuthorize(\"@ss.hasPermi('labor:project:edit')\")\r\n    @Log(title = \"培训项目\", businessType = BusinessType.UPDATE)\r\n    @PutMapping(\"/edit\")\r\n    public AjaxResult edit(@RequestBody TrainProject trainProject) {\r\n        int result = trainProjectService.checkProjectUnique(trainProject);\r\n        if (result > 0) {\r\n            return error(\"修改'\" + trainProject.getProjectName() + \"'失败，此项目名称已经存在\");\r\n        }\r\n        Department dept = departmentService.selectDepartmentByDeptId(new Long(trainProject.getProjectDeptId()));\r\n        trainProject.setProjectDeptName(dept.getDeptName());\r\n        String username = getUsername();\r\n        return toAjax(trainProjectService.updateTrainProject(trainProject, username));\r\n    }\r\n\r\n    /**\r\n     * 删除培训项目\r\n     */\r\n    @ApiOperation(\"根据ID删除培训项目\")\r\n    @PreAuthorize(\"@ss.hasPermi('labor:project:remove')\")\r\n    @Log(title = \"培训项目\", businessType = BusinessType.DELETE)\r\n    @DeleteMapping(\"/remove/{projectIds}\")\r\n    public AjaxResult remove(@PathVariable Integer[] projectIds) {\r\n        return toAjax(trainProjectService.deleteTrainProjectByProjectIds(projectIds));\r\n    }\r\n\r\n    /**\r\n     * 初始化新增页面数据\r\n     *\r\n     * @return\r\n     */\r\n    @ApiOperation(\"初始化新增页面数据\")\r\n    @PreAuthorize(\"@ss.hasPermi('labor:project:query')\")\r\n    @GetMapping(\"/initAdd\")\r\n    public AjaxResult initAdd() {\r\n        AjaxResult ajax = AjaxResult.success();\r\n        List<Department> deptList = departmentService.selectDepartmentListByDept(new Department());\r\n        ajax.put(\"deptsData\", deptList);\r\n        return ajax;\r\n    }\r\n\r\n    @ApiOperation(\"修改培训项目\")\r\n    @PreAuthorize(\"@ss.hasPermi('labor:project:edit')\")\r\n    @Log(title = \"培训项目\", businessType = BusinessType.UPDATE)\r\n    @PutMapping(\"/editStatus\")\r\n    public AjaxResult editStatus(@RequestBody TrainProject trainProject) {\r\n\r\n        String username = getUsername();\r\n        return toAjax(trainProjectService.updateTrainProject(trainProject, username));\r\n    }\r\n\r\n    /**\r\n     * 下载模板\r\n     * @param response\r\n     */\r\n    @ApiOperation(value = \"下载培训项目模板\")\r\n    //@PreAuthorize(\"@ss.hasPermi('labor:project:import')\")\r\n    @GetMapping(\"/excel/download\")\r\n    public void downloadExcel(HttpServletResponse response) {\r\n        try {\r\n            trainProjectService.downloadExcel(response,\"trainProject.xlsx\");\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    @ApiOperation(\"导入培训项目数据\")\r\n    //@PreAuthorize(\"@ss.hasPermi('labor:project:import')\")\r\n    @PostMapping(\"/importData\")\r\n    public AjaxResult importData(MultipartFile file) {\r\n        LoginUser loginUser = getLoginUser();\r\n        return success(trainProjectService.uploadTrainProjectFile(file, loginUser.getUserId(), loginUser.getUsername()));\r\n    }\r\n\r\n    /**\r\n     * 导出员工列表\r\n     */\r\n    @ApiOperation(\"直接导出培训信息\")\r\n    //@PreAuthorize(\"@ss.hasPermi('labor:project:export')\")\r\n    @Log(title = \"培训项目\", businessType = BusinessType.EXPORT)\r\n    @PostMapping(\"/export\")\r\n    public void export(HttpServletResponse response, @RequestBody TrainProjectExportVO trainProjectExport) {\r\n        List<TrainProject> list = trainProjectService.selectTrainProjectExportInfos(trainProjectExport);\r\n        ExcelUtil<TrainProject> util = new ExcelUtil<>(TrainProject.class);\r\n        Field[] declaredFields = TrainProject.class.getDeclaredFields();\r\n        List<String> fieldNamesWithExcel = new ArrayList<>();\r\n        for (Field field : declaredFields) {\r\n            ReflectionUtils.makeAccessible(field);\r\n            if (field.isAnnotationPresent(Excel.class)) {\r\n                fieldNamesWithExcel.add(field.getName());\r\n            }\r\n        }\r\n        List<String> excludeFieldNames = new ArrayList<>();\r\n        List<String> fieldNames = trainProjectExport.getFieldNames();\r\n\r\n        if(fieldNames!=null && fieldNames.size()>0) {\r\n            for (String s : fieldNamesWithExcel) {\r\n                if (!fieldNames.contains(s)) {\r\n                    excludeFieldNames.add(s);\r\n                }\r\n            }\r\n            if (!CollectionUtils.isEmpty(excludeFieldNames)) {\r\n                String[] excludeArr = new String[excludeFieldNames.size()];\r\n                excludeFieldNames.toArray(excludeArr);\r\n                util.hideColumn(excludeArr);\r\n            }\r\n        }\r\n\r\n\r\n        util.exportExcel(response, list, \"项目培训数据\");\r\n    }\r\n\r\n\r\n    /**\r\n     * 表格拆分导出员工信息\r\n     */\r\n    @ApiOperation(\"表格拆分导出培训项目信息\")\r\n    //@PreAuthorize(\"@ss.hasPermi('labor:project:export')\")\r\n    @Log(title = \"培训项目\", businessType = BusinessType.EXPORT)\r\n    @PostMapping(\"/export/divide\")\r\n    public void exportDivide(HttpServletResponse response, @RequestBody TrainProjectExportDivideVO trainProjectExportDivide) {\r\n        trainProjectService.exportDivide(response, trainProjectExportDivide);\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/laborBackend-admin/src/main/java/com/yuantu/web/controller/labor/TrainProjectController.java b/laborBackend-admin/src/main/java/com/yuantu/web/controller/labor/TrainProjectController.java
--- a/laborBackend-admin/src/main/java/com/yuantu/web/controller/labor/TrainProjectController.java	(revision d00f6288923b1a27bdaf28c8d63a72fe4202b66a)
+++ b/laborBackend-admin/src/main/java/com/yuantu/web/controller/labor/TrainProjectController.java	(date 1700208784662)
@@ -184,7 +184,8 @@
     @GetMapping("/excel/download")
     public void downloadExcel(HttpServletResponse response) {
         try {
-            trainProjectService.downloadExcel(response,"trainProject.xlsx");
+            //trainProjectService.downloadExcel(response,"trainProject.xlsx");
+            trainProjectService.downloadTrainProjectExcel(response);
         } catch (Exception e) {
             e.printStackTrace();
         }
Index: laborBackend-framework/src/main/java/com/yuantu/framework/config/SecurityConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.yuantu.framework.config;\r\n\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.http.HttpMethod;\r\nimport org.springframework.security.authentication.AuthenticationManager;\r\nimport org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\r\nimport org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;\r\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\r\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\r\nimport org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer;\r\nimport org.springframework.security.config.http.SessionCreationPolicy;\r\nimport org.springframework.security.core.userdetails.UserDetailsService;\r\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\r\nimport org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;\r\nimport org.springframework.security.web.authentication.logout.LogoutFilter;\r\nimport org.springframework.web.filter.CorsFilter;\r\nimport com.yuantu.framework.config.properties.PermitAllUrlProperties;\r\nimport com.yuantu.framework.security.filter.JwtAuthenticationTokenFilter;\r\nimport com.yuantu.framework.security.handle.AuthenticationEntryPointImpl;\r\nimport com.yuantu.framework.security.handle.LogoutSuccessHandlerImpl;\r\n\r\n/**\r\n * spring security配置\r\n * \r\n * @author ruoyi\r\n */\r\n@EnableGlobalMethodSecurity(prePostEnabled = true, securedEnabled = true)\r\npublic class SecurityConfig extends WebSecurityConfigurerAdapter\r\n{\r\n    /**\r\n     * 自定义用户认证逻辑\r\n     */\r\n    @Autowired\r\n    private UserDetailsService userDetailsService;\r\n    \r\n    /**\r\n     * 认证失败处理类\r\n     */\r\n    @Autowired\r\n    private AuthenticationEntryPointImpl unauthorizedHandler;\r\n\r\n    /**\r\n     * 退出处理类\r\n     */\r\n    @Autowired\r\n    private LogoutSuccessHandlerImpl logoutSuccessHandler;\r\n\r\n    /**\r\n     * token认证过滤器\r\n     */\r\n    @Autowired\r\n    private JwtAuthenticationTokenFilter authenticationTokenFilter;\r\n    \r\n    /**\r\n     * 跨域过滤器\r\n     */\r\n    @Autowired\r\n    private CorsFilter corsFilter;\r\n\r\n    /**\r\n     * 允许匿名访问的地址\r\n     */\r\n    @Autowired\r\n    private PermitAllUrlProperties permitAllUrl;\r\n\r\n    /**\r\n     * 解决 无法直接注入 AuthenticationManager\r\n     *\r\n     * @return\r\n     * @throws Exception\r\n     */\r\n    @Bean\r\n    @Override\r\n    public AuthenticationManager authenticationManagerBean() throws Exception\r\n    {\r\n        return super.authenticationManagerBean();\r\n    }\r\n\r\n    /**\r\n     * anyRequest          |   匹配所有请求路径\r\n     * access              |   SpringEl表达式结果为true时可以访问\r\n     * anonymous           |   匿名可以访问\r\n     * denyAll             |   用户不能访问\r\n     * fullyAuthenticated  |   用户完全认证可以访问（非remember-me下自动登录）\r\n     * hasAnyAuthority     |   如果有参数，参数表示权限，则其中任何一个权限可以访问\r\n     * hasAnyRole          |   如果有参数，参数表示角色，则其中任何一个角色可以访问\r\n     * hasAuthority        |   如果有参数，参数表示权限，则其权限可以访问\r\n     * hasIpAddress        |   如果有参数，参数表示IP地址，如果用户IP和参数匹配，则可以访问\r\n     * hasRole             |   如果有参数，参数表示角色，则其角色可以访问\r\n     * permitAll           |   用户可以任意访问\r\n     * rememberMe          |   允许通过remember-me登录的用户访问\r\n     * authenticated       |   用户登录后可访问\r\n     */\r\n    @Override\r\n    protected void configure(HttpSecurity httpSecurity) throws Exception\r\n    {\r\n        // 注解标记允许匿名访问的url\r\n        ExpressionUrlAuthorizationConfigurer<HttpSecurity>.ExpressionInterceptUrlRegistry registry = httpSecurity.authorizeRequests();\r\n        permitAllUrl.getUrls().forEach(url -> registry.antMatchers(url).permitAll());\r\n\r\n        httpSecurity\r\n                // CSRF禁用，因为不使用session\r\n                .csrf().disable()\r\n                // 禁用HTTP响应标头\r\n                .headers().cacheControl().disable().and()\r\n                // 认证失败处理类\r\n                .exceptionHandling().authenticationEntryPoint(unauthorizedHandler).and()\r\n                // 基于token，所以不需要session\r\n                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and()\r\n                // 过滤请求\r\n                .authorizeRequests()\r\n                // 对于登录login 注册register 验证码captchaImage 允许匿名访问\r\n                .antMatchers(\"/login\", \"/register\", \"/captchaImage\").permitAll()\r\n                // 静态资源，可匿名访问\r\n                .antMatchers(HttpMethod.GET, \"/\", \"/*.html\", \"/**/*.html\", \"/**/*.css\", \"/**/*.js\", \"/profile/**\").permitAll()\r\n                .antMatchers(\"/swagger-ui.html\", \"/swagger-resources/**\", \"/webjars/**\", \"/*/api-docs\", \"/druid/**\").permitAll()\r\n              //  .antMatchers(\"/labor/**\").permitAll()\r\n                // 除上面外的所有请求全部需要鉴权认证\r\n                .anyRequest().authenticated()\r\n                .and()\r\n                .headers().frameOptions().disable();\r\n        // 添加Logout filter\r\n        httpSecurity.logout().logoutUrl(\"/logout\").logoutSuccessHandler(logoutSuccessHandler);\r\n        // 添加JWT filter\r\n        httpSecurity.addFilterBefore(authenticationTokenFilter, UsernamePasswordAuthenticationFilter.class);\r\n        // 添加CORS filter\r\n        httpSecurity.addFilterBefore(corsFilter, JwtAuthenticationTokenFilter.class);\r\n        httpSecurity.addFilterBefore(corsFilter, LogoutFilter.class);\r\n    }\r\n\r\n    /**\r\n     * 强散列哈希加密实现\r\n     */\r\n    @Bean\r\n    public BCryptPasswordEncoder bCryptPasswordEncoder()\r\n    {\r\n        return new BCryptPasswordEncoder();\r\n    }\r\n\r\n    /**\r\n     * 身份认证接口\r\n     */\r\n    @Override\r\n    protected void configure(AuthenticationManagerBuilder auth) throws Exception\r\n    {\r\n        auth.userDetailsService(userDetailsService).passwordEncoder(bCryptPasswordEncoder());\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/laborBackend-framework/src/main/java/com/yuantu/framework/config/SecurityConfig.java b/laborBackend-framework/src/main/java/com/yuantu/framework/config/SecurityConfig.java
--- a/laborBackend-framework/src/main/java/com/yuantu/framework/config/SecurityConfig.java	(revision d00f6288923b1a27bdaf28c8d63a72fe4202b66a)
+++ b/laborBackend-framework/src/main/java/com/yuantu/framework/config/SecurityConfig.java	(date 1700208866761)
@@ -115,7 +115,7 @@
                 // 静态资源，可匿名访问
                 .antMatchers(HttpMethod.GET, "/", "/*.html", "/**/*.html", "/**/*.css", "/**/*.js", "/profile/**").permitAll()
                 .antMatchers("/swagger-ui.html", "/swagger-resources/**", "/webjars/**", "/*/api-docs", "/druid/**").permitAll()
-              //  .antMatchers("/labor/**").permitAll()
+                .antMatchers("/labor/**").permitAll()
                 // 除上面外的所有请求全部需要鉴权认证
                 .anyRequest().authenticated()
                 .and()
