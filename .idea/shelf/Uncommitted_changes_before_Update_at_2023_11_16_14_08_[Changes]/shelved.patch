Index: laborBackend-framework/src/main/java/com/yuantu/framework/config/SecurityConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.yuantu.framework.config;\r\n\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.http.HttpMethod;\r\nimport org.springframework.security.authentication.AuthenticationManager;\r\nimport org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\r\nimport org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;\r\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\r\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\r\nimport org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer;\r\nimport org.springframework.security.config.http.SessionCreationPolicy;\r\nimport org.springframework.security.core.userdetails.UserDetailsService;\r\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\r\nimport org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;\r\nimport org.springframework.security.web.authentication.logout.LogoutFilter;\r\nimport org.springframework.web.filter.CorsFilter;\r\nimport com.yuantu.framework.config.properties.PermitAllUrlProperties;\r\nimport com.yuantu.framework.security.filter.JwtAuthenticationTokenFilter;\r\nimport com.yuantu.framework.security.handle.AuthenticationEntryPointImpl;\r\nimport com.yuantu.framework.security.handle.LogoutSuccessHandlerImpl;\r\n\r\n/**\r\n * spring security配置\r\n * \r\n * @author ruoyi\r\n */\r\n@EnableGlobalMethodSecurity(prePostEnabled = true, securedEnabled = true)\r\npublic class SecurityConfig extends WebSecurityConfigurerAdapter\r\n{\r\n    /**\r\n     * 自定义用户认证逻辑\r\n     */\r\n    @Autowired\r\n    private UserDetailsService userDetailsService;\r\n    \r\n    /**\r\n     * 认证失败处理类\r\n     */\r\n    @Autowired\r\n    private AuthenticationEntryPointImpl unauthorizedHandler;\r\n\r\n    /**\r\n     * 退出处理类\r\n     */\r\n    @Autowired\r\n    private LogoutSuccessHandlerImpl logoutSuccessHandler;\r\n\r\n    /**\r\n     * token认证过滤器\r\n     */\r\n    @Autowired\r\n    private JwtAuthenticationTokenFilter authenticationTokenFilter;\r\n    \r\n    /**\r\n     * 跨域过滤器\r\n     */\r\n    @Autowired\r\n    private CorsFilter corsFilter;\r\n\r\n    /**\r\n     * 允许匿名访问的地址\r\n     */\r\n    @Autowired\r\n    private PermitAllUrlProperties permitAllUrl;\r\n\r\n    /**\r\n     * 解决 无法直接注入 AuthenticationManager\r\n     *\r\n     * @return\r\n     * @throws Exception\r\n     */\r\n    @Bean\r\n    @Override\r\n    public AuthenticationManager authenticationManagerBean() throws Exception\r\n    {\r\n        return super.authenticationManagerBean();\r\n    }\r\n\r\n    /**\r\n     * anyRequest          |   匹配所有请求路径\r\n     * access              |   SpringEl表达式结果为true时可以访问\r\n     * anonymous           |   匿名可以访问\r\n     * denyAll             |   用户不能访问\r\n     * fullyAuthenticated  |   用户完全认证可以访问（非remember-me下自动登录）\r\n     * hasAnyAuthority     |   如果有参数，参数表示权限，则其中任何一个权限可以访问\r\n     * hasAnyRole          |   如果有参数，参数表示角色，则其中任何一个角色可以访问\r\n     * hasAuthority        |   如果有参数，参数表示权限，则其权限可以访问\r\n     * hasIpAddress        |   如果有参数，参数表示IP地址，如果用户IP和参数匹配，则可以访问\r\n     * hasRole             |   如果有参数，参数表示角色，则其角色可以访问\r\n     * permitAll           |   用户可以任意访问\r\n     * rememberMe          |   允许通过remember-me登录的用户访问\r\n     * authenticated       |   用户登录后可访问\r\n     */\r\n    @Override\r\n    protected void configure(HttpSecurity httpSecurity) throws Exception\r\n    {\r\n        // 注解标记允许匿名访问的url\r\n        ExpressionUrlAuthorizationConfigurer<HttpSecurity>.ExpressionInterceptUrlRegistry registry = httpSecurity.authorizeRequests();\r\n        permitAllUrl.getUrls().forEach(url -> registry.antMatchers(url).permitAll());\r\n\r\n        httpSecurity\r\n                // CSRF禁用，因为不使用session\r\n                .csrf().disable()\r\n                // 禁用HTTP响应标头\r\n                .headers().cacheControl().disable().and()\r\n                // 认证失败处理类\r\n                .exceptionHandling().authenticationEntryPoint(unauthorizedHandler).and()\r\n                // 基于token，所以不需要session\r\n                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and()\r\n                // 过滤请求\r\n                .authorizeRequests()\r\n                // 对于登录login 注册register 验证码captchaImage 允许匿名访问\r\n                .antMatchers(\"/login\", \"/register\", \"/captchaImage\").permitAll()\r\n                // 静态资源，可匿名访问\r\n                .antMatchers(HttpMethod.GET, \"/\", \"/*.html\", \"/**/*.html\", \"/**/*.css\", \"/**/*.js\", \"/profile/**\").permitAll()\r\n                .antMatchers(\"/swagger-ui.html\", \"/swagger-resources/**\", \"/webjars/**\", \"/*/api-docs\", \"/druid/**\").permitAll()\r\n              //  .antMatchers(\"/labor/**\").permitAll()\r\n                // 除上面外的所有请求全部需要鉴权认证\r\n                .anyRequest().authenticated()\r\n                .and()\r\n                .headers().frameOptions().disable();\r\n        // 添加Logout filter\r\n        httpSecurity.logout().logoutUrl(\"/logout\").logoutSuccessHandler(logoutSuccessHandler);\r\n        // 添加JWT filter\r\n        httpSecurity.addFilterBefore(authenticationTokenFilter, UsernamePasswordAuthenticationFilter.class);\r\n        // 添加CORS filter\r\n        httpSecurity.addFilterBefore(corsFilter, JwtAuthenticationTokenFilter.class);\r\n        httpSecurity.addFilterBefore(corsFilter, LogoutFilter.class);\r\n    }\r\n\r\n    /**\r\n     * 强散列哈希加密实现\r\n     */\r\n    @Bean\r\n    public BCryptPasswordEncoder bCryptPasswordEncoder()\r\n    {\r\n        return new BCryptPasswordEncoder();\r\n    }\r\n\r\n    /**\r\n     * 身份认证接口\r\n     */\r\n    @Override\r\n    protected void configure(AuthenticationManagerBuilder auth) throws Exception\r\n    {\r\n        auth.userDetailsService(userDetailsService).passwordEncoder(bCryptPasswordEncoder());\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/laborBackend-framework/src/main/java/com/yuantu/framework/config/SecurityConfig.java b/laborBackend-framework/src/main/java/com/yuantu/framework/config/SecurityConfig.java
--- a/laborBackend-framework/src/main/java/com/yuantu/framework/config/SecurityConfig.java	(revision f21d72426ea73e886f54bc9de4b5c1705c326dad)
+++ b/laborBackend-framework/src/main/java/com/yuantu/framework/config/SecurityConfig.java	(date 1700114421864)
@@ -115,7 +115,7 @@
                 // 静态资源，可匿名访问
                 .antMatchers(HttpMethod.GET, "/", "/*.html", "/**/*.html", "/**/*.css", "/**/*.js", "/profile/**").permitAll()
                 .antMatchers("/swagger-ui.html", "/swagger-resources/**", "/webjars/**", "/*/api-docs", "/druid/**").permitAll()
-              //  .antMatchers("/labor/**").permitAll()
+                .antMatchers("/labor/**").permitAll()
                 // 除上面外的所有请求全部需要鉴权认证
                 .anyRequest().authenticated()
                 .and()
Index: laborBackend-admin/src/main/java/com/yuantu/web/controller/labor/BudgetController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.yuantu.web.controller.labor;\r\n\r\nimport java.util.List;\r\nimport javax.servlet.http.HttpServletResponse;\r\n\r\nimport com.yuantu.common.core.domain.entity.SysDictData;\r\nimport com.yuantu.labor.domain.Department;\r\nimport com.yuantu.labor.domain.EmployingUnits;\r\nimport com.yuantu.labor.service.IEmployingUnitsService;\r\nimport com.yuantu.labor.vo.BudgetQueryVO;\r\nimport com.yuantu.labor.vo.EmpNameCardVO;\r\nimport com.yuantu.labor.vo.EmployeeInfoVO;\r\nimport com.yuantu.system.service.ISysDictDataService;\r\nimport io.swagger.annotations.Api;\r\nimport io.swagger.annotations.ApiOperation;\r\nimport org.springframework.security.access.prepost.PreAuthorize;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.PostMapping;\r\nimport org.springframework.web.bind.annotation.PutMapping;\r\nimport org.springframework.web.bind.annotation.DeleteMapping;\r\nimport org.springframework.web.bind.annotation.PathVariable;\r\nimport org.springframework.web.bind.annotation.RequestBody;\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\nimport com.yuantu.common.annotation.Log;\r\nimport com.yuantu.common.core.controller.BaseController;\r\nimport com.yuantu.common.core.domain.AjaxResult;\r\nimport com.yuantu.common.enums.BusinessType;\r\nimport com.yuantu.labor.domain.Budget;\r\nimport com.yuantu.labor.service.IBudgetService;\r\nimport com.yuantu.common.utils.poi.ExcelUtil;\r\nimport com.yuantu.common.core.page.TableDataInfo;\r\n\r\n/**\r\n * 预算主Controller\r\n * \r\n * @author ruoyi\r\n * @date 2023-10-07\r\n */\r\n@Api(\"预算管理\")\r\n@RestController\r\n@RequestMapping(\"/labor/budget\")\r\npublic class BudgetController extends BaseController\r\n{\r\n    @Autowired\r\n    private IBudgetService budgetService;\r\n\r\n    @Autowired\r\n    private IEmployingUnitsService employingUnitsService;\r\n    @Autowired\r\n    private ISysDictDataService sysDictDataService;\r\n\r\n    /**\r\n     * 查询预算主列表\r\n     */\r\n    @ApiOperation(\"查询预算列表\")\r\n    @PreAuthorize(\"@ss.hasPermi('labor:budget:list')\")\r\n    @GetMapping(\"/list\")\r\n    public TableDataInfo list(Budget budget)\r\n    {\r\n        startPage();\r\n        List<Budget> list = budgetService.selectBudgetList(budget);\r\n        return getDataTable(list);\r\n    }\r\n\r\n    /**\r\n     * 导出预算主列表,\r\n     */\r\n    @ApiOperation(\"导出预算主列表\")\r\n    @PreAuthorize(\"@ss.hasPermi('labor:budget:export')\")\r\n    @Log(title = \"预算主\", businessType = BusinessType.EXPORT)\r\n    @PostMapping(\"/export\")\r\n    public void export(HttpServletResponse response, Budget budget)\r\n    {\r\n        List<Budget> list = budgetService.selectBudgetList(budget);\r\n        ExcelUtil<Budget> util = new ExcelUtil<Budget>(Budget.class);\r\n        util.exportExcel(response, list, \"预算主数据\");\r\n    }\r\n\r\n    /**\r\n     * 获取预算主详细信息\r\n     */\r\n    @ApiOperation(\"获取预算主详细信息\")\r\n    @PreAuthorize(\"@ss.hasPermi('labor:budget:query')\")\r\n    @GetMapping(value = \"/getInfo/{budgetId}\")\r\n    public AjaxResult getInfo(@PathVariable(\"budgetId\") Integer budgetId)\r\n    {\r\n        return success(budgetService.selectBudgetByBudgetId(budgetId));\r\n    }\r\n\r\n    /**\r\n     * 新增预算\r\n     */\r\n    @ApiOperation(\"新增预算\")\r\n    @PreAuthorize(\"@ss.hasPermi('labor:budget:add')\")\r\n    @Log(title = \"预算主\", businessType = BusinessType.INSERT)\r\n    @PostMapping(\"/add\")\r\n    public AjaxResult add(@RequestBody Budget budget)\r\n    {\r\n//        EmployingUnits empUnits =  employingUnitsService.selectEmployingUnitsByUnitId(budget.getBudgetCompanyId());\r\n//        budget.setBudgetCompanyName(empUnits.getUnitName());\r\n        String name = getUsername();\r\n        budget.setCreateBy(name);\r\n        String label = sysDictDataService.selectDictLabel(\"budget_type\",budget.getBudgetTypeId());\r\n        budget.setBudgetTypeName(label);\r\n        return toAjax(budgetService.insertBudget(budget));\r\n    }\r\n\r\n    /**\r\n     * 修改预算主\r\n     */\r\n    @ApiOperation(\"修改预算\")\r\n    @PreAuthorize(\"@ss.hasPermi('labor:budget:edit')\")\r\n    @Log(title = \"预算主\", businessType = BusinessType.UPDATE)\r\n    @PutMapping(\"/edit\")\r\n    public AjaxResult edit(@RequestBody Budget budget)\r\n    {\r\n        String username = getUsername();\r\n        budget.setUpdateBy(username);\r\n        return toAjax(budgetService.updateBudget(budget));\r\n    }\r\n\r\n    /**\r\n     * 删除预算主\r\n     */\r\n    @ApiOperation(\"删除预算\")\r\n    @PreAuthorize(\"@ss.hasPermi('labor:budget:remove')\")\r\n    @Log(title = \"预算主\", businessType = BusinessType.DELETE)\r\n\t@DeleteMapping(\"/remove/{budgetIds}\")\r\n    public AjaxResult remove(@PathVariable Integer[] budgetIds)\r\n    {\r\n        return toAjax(budgetService.deleteBudgetByBudgetIds(budgetIds));\r\n    }\r\n\r\n    @ApiOperation(\"初始化新增预算数据，取得公司列表\")\r\n    @PreAuthorize(\"@ss.hasPermi('labor:budget:query')\")\r\n    @GetMapping(\"/initAdd\")\r\n    public AjaxResult initAdd()\r\n    {\r\n        AjaxResult ajax = AjaxResult.success();\r\n\r\n        EmployingUnits units = new EmployingUnits();\r\n        units.setUnitType(new Long(0));\r\n        List<EmployingUnits> employingUnitsList = employingUnitsService.selectEmployingUnitsList(units);\r\n        ajax.put(\"employingUnitsData\",employingUnitsList);\r\n\r\n        return ajax;\r\n    }\r\n    @ApiOperation(\"初始化修改页面，返回指定的预算对象\")\r\n    @PreAuthorize(\"@ss.hasPermi('labor:budget:query')\")\r\n    @GetMapping(value = \"/initEdit/{budgetId}\")\r\n    public AjaxResult initEdit(@PathVariable(\"budgetId\") Integer budgetId)\r\n    {\r\n        return success(budgetService.selectBudgetByBudgetId(budgetId));\r\n    }\r\n    @ApiOperation(\"查询当前用户部门预算列表\")\r\n    @PreAuthorize(\"@ss.hasPermi('labor:budget:dept')\")\r\n    @GetMapping(\"/getDeptBudgets\")\r\n    public TableDataInfo getDeptBudgets(BudgetQueryVO queryVO)\r\n    {\r\n        if(queryVO==null){\r\n            queryVO = new BudgetQueryVO();\r\n        }\r\n        String username = getUsername();\r\n        queryVO.setUsername(username);\r\n        startPage();\r\n        List<Budget> list = budgetService.selectCurrUsrDeptBudget(queryVO);\r\n        return getDataTable(list);\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/laborBackend-admin/src/main/java/com/yuantu/web/controller/labor/BudgetController.java b/laborBackend-admin/src/main/java/com/yuantu/web/controller/labor/BudgetController.java
--- a/laborBackend-admin/src/main/java/com/yuantu/web/controller/labor/BudgetController.java	(revision f21d72426ea73e886f54bc9de4b5c1705c326dad)
+++ b/laborBackend-admin/src/main/java/com/yuantu/web/controller/labor/BudgetController.java	(date 1700114421914)
@@ -111,7 +111,7 @@
      * 修改预算主
      */
     @ApiOperation("修改预算")
-    @PreAuthorize("@ss.hasPermi('labor:budget:edit')")
+    //@PreAuthorize("@ss.hasPermi('labor:budget:edit')")
     @Log(title = "预算主", businessType = BusinessType.UPDATE)
     @PutMapping("/edit")
     public AjaxResult edit(@RequestBody Budget budget)
