Index: laborBackend-admin/src/main/java/com/yuantu/web/controller/labor/EmpExpertController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.yuantu.web.controller.labor;\r\n\r\nimport com.yuantu.common.annotation.Excel;\r\nimport com.yuantu.common.annotation.Log;\r\nimport com.yuantu.common.core.controller.BaseController;\r\nimport com.yuantu.common.core.domain.AjaxResult;\r\nimport com.yuantu.common.core.domain.model.LoginUser;\r\nimport com.yuantu.common.core.page.TableDataInfo;\r\nimport com.yuantu.common.enums.BusinessType;\r\nimport com.yuantu.common.utils.poi.ExcelUtil;\r\nimport com.yuantu.labor.domain.EmpExpert;\r\nimport com.yuantu.labor.domain.Employee;\r\nimport com.yuantu.labor.service.IEmpExpertService;\r\nimport com.yuantu.labor.service.IEmployeeService;\r\nimport com.yuantu.labor.vo.*;\r\nimport io.swagger.annotations.Api;\r\nimport io.swagger.annotations.ApiOperation;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.security.access.prepost.PreAuthorize;\r\nimport org.springframework.util.CollectionUtils;\r\nimport org.springframework.util.ReflectionUtils;\r\nimport org.springframework.web.bind.annotation.*;\r\nimport org.springframework.web.multipart.MultipartFile;\r\n\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport java.lang.reflect.Field;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n/**\r\n * 【请填写功能名称】Controller\r\n *\r\n * @author ruoyi\r\n * @date 2023-09-11\r\n */\r\n@Api(\"专家管理\")\r\n@RestController\r\n@RequestMapping(\"/labor/expert\")\r\npublic class EmpExpertController extends BaseController {\r\n    @Autowired\r\n    private IEmpExpertService empExpertService;\r\n\r\n    @Autowired\r\n    private IEmployeeService employeeService;\r\n\r\n    /**\r\n     * 查询【请填写功能名称】列表\r\n     */\r\n\r\n    @ApiOperation(\"查询专家信息\")\r\n    @PreAuthorize(\"@ss.hasPermi('labor:expert:list')\")\r\n    @GetMapping(\"/list\")\r\n    public TableDataInfo list(EmpExpert empExpert) {\r\n        startPage();\r\n        List<EmpExpert> list = empExpertService.selectEmpExpertList(empExpert);\r\n        return getDataTable(list);\r\n    }\r\n\r\n    /**\r\n     * 导出【请填写功能名称】列表\r\n     */\r\n\r\n    @ApiOperation(\"导出专家信息列表\")\r\n    @PreAuthorize(\"@ss.hasPermi('labor:expert:export')\")\r\n    @Log(title = \"导出专家信息列表\", businessType = BusinessType.EXPORT)\r\n    @PostMapping(\"/export/{expertIds}\")\r\n    public void export(HttpServletResponse response, @PathVariable Integer[] expertIds) {\r\n        EmpExpertQueryVO vo = new EmpExpertQueryVO();\r\n        vo.setExpertIds(expertIds);\r\n        List<ExpertListVO> list = empExpertService.selectEmpExpertListByWhere(vo);\r\n        ExcelUtil<ExpertListVO> util = new ExcelUtil<ExpertListVO>(ExpertListVO.class);\r\n        util.exportExcel(response, list, \"专家数据\");\r\n    }\r\n\r\n    /**\r\n     * 获取【请填写功能名称】详细信息\r\n     */\r\n\r\n    @ApiOperation(\"根据id获取专家信息\")\r\n    @PreAuthorize(\"@ss.hasPermi('labor:expert:query')\")\r\n    @GetMapping(value = \"/getInfo/{expertId}\")\r\n    public AjaxResult getInfo(@PathVariable(\"expertId\") Integer expertId) {\r\n        return success(empExpertService.selectEmpExpertByExpertId(expertId));\r\n    }\r\n\r\n\r\n    @ApiOperation(\"下载专家信息模板 \")\r\n    @PostMapping(\"/download/template\")\r\n    public void importTemplate(HttpServletResponse response) {\r\n        empExpertService.downloadTemplate(response);\r\n    }\r\n\r\n\r\n    @ApiOperation(\"导入专家数据\")\r\n    @PostMapping(\"/importData\")\r\n    public AjaxResult importData(@RequestBody MultipartFile file) {\r\n        LoginUser loginUser = getLoginUser();\r\n        return success(empExpertService.importEmpExpertData(file, loginUser));\r\n    }\r\n\r\n\r\n    /**\r\n     * 导出员工列表\r\n     */\r\n    @ApiOperation(\"直接导出专家信息\")\r\n    //@PreAuthorize(\"@ss.hasPermi('labor:employee:export')\")\r\n    @Log(title = \"专家\", businessType = BusinessType.EXPORT)\r\n    @PostMapping(\"/export\")\r\n    public void export(HttpServletResponse response, @RequestBody EmpExpertExportVO empExpertExport) {\r\n        List<ExpertExportListVO> list = empExpertService.selectExportExportInfos(empExpertExport);\r\n        ExcelUtil<ExpertExportListVO> util = new ExcelUtil<>(ExpertExportListVO.class);\r\n        Field[] declaredFields = EmpExpert.class.getDeclaredFields();\r\n        List<String> fieldNamesWithExcel = new ArrayList<>();\r\n        for (Field field : declaredFields) {\r\n            ReflectionUtils.makeAccessible(field);\r\n            if (field.isAnnotationPresent(Excel.class)) {\r\n                fieldNamesWithExcel.add(field.getName());\r\n            }\r\n        }\r\n        List<String> excludeFieldNames = new ArrayList<>();\r\n        List<String> fieldNames = empExpertExport.getFieldNames();\r\n        if (!CollectionUtils.isEmpty(fieldNames)) {\r\n            for (String s : fieldNamesWithExcel) {\r\n                if (!fieldNames.contains(s)) {\r\n                    excludeFieldNames.add(s);\r\n                }\r\n            }\r\n            if (!CollectionUtils.isEmpty(excludeFieldNames)) {\r\n                String[] excludeArr = new String[excludeFieldNames.size()];\r\n                excludeFieldNames.toArray(excludeArr);\r\n                util.hideColumn(excludeArr);\r\n            }\r\n        }\r\n        util.exportExcel(response, list, \"专家数据\");\r\n    }\r\n\r\n\r\n    /**\r\n     * 表格拆分导出员工信息\r\n     */\r\n    @ApiOperation(\"表格拆分导出专家信息\")\r\n    //@PreAuthorize(\"@ss.hasPermi('labor:employee:export')\")\r\n    @Log(title = \"专家\", businessType = BusinessType.EXPORT)\r\n    @PostMapping(\"/export/divide\")\r\n    public void exportDivide(HttpServletResponse response, @RequestBody EmpExpertExportDivideVO empExpertExportDivide) {\r\n        empExpertService.exportDivide(response, empExpertExportDivide);\r\n    }\r\n\r\n\r\n    /**\r\n     * 新增专家信息\r\n     */\r\n\r\n    @ApiOperation(\"新增专家信息\")\r\n    @PreAuthorize(\"@ss.hasPermi('labor:expert:add')\")\r\n    @Log(title = \"新增专家\", businessType = BusinessType.INSERT)\r\n    @PostMapping(\"/add\")\r\n    public AjaxResult add(@RequestBody EmpExpert empExpert) {\r\n        if (empExpert.getExpertEmpName() == null) {\r\n            Employee emp = employeeService.selectEmployeeByEmpId(empExpert.getExpertEmpId());\r\n            empExpert.setExpertEmpName(emp.getEmpName());\r\n            empExpert.setExpertEmpIdcard(emp.getEmpIdcard());\r\n        }\r\n        String username = getUsername();\r\n        return toAjax(empExpertService.insertEmpExpert(empExpert, username));\r\n    }\r\n\r\n    /**\r\n     * 修改【请填写功能名称】\r\n     */\r\n    @ApiOperation(\"修改专家信息\")\r\n    @PreAuthorize(\"@ss.hasPermi('labor:expert:edit')\")\r\n    @Log(title = \"【专家修改】\", businessType = BusinessType.UPDATE)\r\n    @PutMapping(\"/edit\")\r\n    public AjaxResult edit(@RequestBody EmpExpert empExpert) {\r\n        String username = getUsername();\r\n        return toAjax(empExpertService.updateEmpExpert(empExpert, username));\r\n    }\r\n\r\n    /**\r\n     * 删除【请填写功能名称】\r\n     */\r\n\r\n    @ApiOperation(\"删除专家信息\")\r\n    @PreAuthorize(\"@ss.hasPermi('labor:expert:remove')\")\r\n    @Log(title = \"【删除专家】\", businessType = BusinessType.DELETE)\r\n    @DeleteMapping(\"/remove/{expertIds}\")\r\n    public AjaxResult remove(@PathVariable Integer[] expertIds) {\r\n        return toAjax(empExpertService.deleteEmpExpertByExpertIds(expertIds));\r\n    }\r\n\r\n    /**\r\n     * 根据条件查询专家列表\r\n     *\r\n     * @param queryVO\r\n     * @return\r\n     */\r\n    @ApiOperation(\"根据条件查询专家信息\")\r\n    @PreAuthorize(\"@ss.hasPermi('labor:expert:query')\")\r\n    @GetMapping(\"/queryExperts\")\r\n    public TableDataInfo queryExperts(EmpExpertQueryVO queryVO) {\r\n        startPage();\r\n        List<ExpertListVO> list = empExpertService.selectEmpExpertListByWhere(queryVO);\r\n        return getDataTable(list);\r\n    }\r\n\r\n    /**\r\n     * 初始化专家新增和页面\r\n     *\r\n     * @return\r\n     */\r\n    @ApiOperation(\"初始化新增专家信息，取得员工名称和身份证数据\")\r\n    @PreAuthorize(\"@ss.hasPermi('labor:expert:add')\")\r\n    @GetMapping(\"/initExpert\")\r\n    public AjaxResult initExpert() {\r\n        System.out.println(\"开始了\");\r\n        AjaxResult ajax = AjaxResult.success();\r\n        EmployeeInfoVO infoVO = new EmployeeInfoVO();\r\n        /**\r\n        List<String> statusList = new ArrayList<>();\r\n\r\n        statusList.add(\"1\");\r\n        statusList.add(\"2\");\r\n        statusList.add(\"5\");\r\n        statusList.add(\"6\");\r\n        statusList.add(\"7\");\r\n        infoVO.setEmpStatusList(statusList);\r\n         **/\r\n        List<EmpNameCardVO> empNameCardList = employeeService.selectEmpNameAndCard(infoVO);\r\n        ajax.put(\"empNameAndCardData\", empNameCardList);\r\n        return ajax;\r\n    }\r\n\r\n    /**\r\n     * 专家数量统计\r\n     *\r\n     * @return\r\n     */\r\n    @ApiOperation(\"专家数量统计,包括：各部门专家数量统计和各称号专家数量统计\")\r\n    @PreAuthorize(\"@ss.hasPermi('labor:expert:query')\")\r\n    @GetMapping(\"/counting\")\r\n    public AjaxResult counting() {\r\n        AjaxResult ajax = AjaxResult.success();\r\n        ajax.put(\"deptCountData\", empExpertService.countByDept());\r\n        ajax.put(\"titleCountData\", empExpertService.countByTitle());\r\n\r\n        return ajax;\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/laborBackend-admin/src/main/java/com/yuantu/web/controller/labor/EmpExpertController.java b/laborBackend-admin/src/main/java/com/yuantu/web/controller/labor/EmpExpertController.java
--- a/laborBackend-admin/src/main/java/com/yuantu/web/controller/labor/EmpExpertController.java	(revision aa62bc6d0c2f0b21cd307df5288b5de5dd2479e7)
+++ b/laborBackend-admin/src/main/java/com/yuantu/web/controller/labor/EmpExpertController.java	(date 1700201574216)
@@ -61,7 +61,7 @@
      */
 
     @ApiOperation("导出专家信息列表")
-    @PreAuthorize("@ss.hasPermi('labor:expert:export')")
+    //@PreAuthorize("@ss.hasPermi('labor:expert:export')")
     @Log(title = "导出专家信息列表", businessType = BusinessType.EXPORT)
     @PostMapping("/export/{expertIds}")
     public void export(HttpServletResponse response, @PathVariable Integer[] expertIds) {
@@ -77,7 +77,7 @@
      */
 
     @ApiOperation("根据id获取专家信息")
-    @PreAuthorize("@ss.hasPermi('labor:expert:query')")
+    //@PreAuthorize("@ss.hasPermi('labor:expert:query')")
     @GetMapping(value = "/getInfo/{expertId}")
     public AjaxResult getInfo(@PathVariable("expertId") Integer expertId) {
         return success(empExpertService.selectEmpExpertByExpertId(expertId));
Index: laborBackend-framework/src/main/java/com/yuantu/framework/config/SecurityConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.yuantu.framework.config;\r\n\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.http.HttpMethod;\r\nimport org.springframework.security.authentication.AuthenticationManager;\r\nimport org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\r\nimport org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;\r\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\r\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\r\nimport org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer;\r\nimport org.springframework.security.config.http.SessionCreationPolicy;\r\nimport org.springframework.security.core.userdetails.UserDetailsService;\r\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\r\nimport org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;\r\nimport org.springframework.security.web.authentication.logout.LogoutFilter;\r\nimport org.springframework.web.filter.CorsFilter;\r\nimport com.yuantu.framework.config.properties.PermitAllUrlProperties;\r\nimport com.yuantu.framework.security.filter.JwtAuthenticationTokenFilter;\r\nimport com.yuantu.framework.security.handle.AuthenticationEntryPointImpl;\r\nimport com.yuantu.framework.security.handle.LogoutSuccessHandlerImpl;\r\n\r\n/**\r\n * spring security配置\r\n * \r\n * @author ruoyi\r\n */\r\n@EnableGlobalMethodSecurity(prePostEnabled = true, securedEnabled = true)\r\npublic class SecurityConfig extends WebSecurityConfigurerAdapter\r\n{\r\n    /**\r\n     * 自定义用户认证逻辑\r\n     */\r\n    @Autowired\r\n    private UserDetailsService userDetailsService;\r\n    \r\n    /**\r\n     * 认证失败处理类\r\n     */\r\n    @Autowired\r\n    private AuthenticationEntryPointImpl unauthorizedHandler;\r\n\r\n    /**\r\n     * 退出处理类\r\n     */\r\n    @Autowired\r\n    private LogoutSuccessHandlerImpl logoutSuccessHandler;\r\n\r\n    /**\r\n     * token认证过滤器\r\n     */\r\n    @Autowired\r\n    private JwtAuthenticationTokenFilter authenticationTokenFilter;\r\n    \r\n    /**\r\n     * 跨域过滤器\r\n     */\r\n    @Autowired\r\n    private CorsFilter corsFilter;\r\n\r\n    /**\r\n     * 允许匿名访问的地址\r\n     */\r\n    @Autowired\r\n    private PermitAllUrlProperties permitAllUrl;\r\n\r\n    /**\r\n     * 解决 无法直接注入 AuthenticationManager\r\n     *\r\n     * @return\r\n     * @throws Exception\r\n     */\r\n    @Bean\r\n    @Override\r\n    public AuthenticationManager authenticationManagerBean() throws Exception\r\n    {\r\n        return super.authenticationManagerBean();\r\n    }\r\n\r\n    /**\r\n     * anyRequest          |   匹配所有请求路径\r\n     * access              |   SpringEl表达式结果为true时可以访问\r\n     * anonymous           |   匿名可以访问\r\n     * denyAll             |   用户不能访问\r\n     * fullyAuthenticated  |   用户完全认证可以访问（非remember-me下自动登录）\r\n     * hasAnyAuthority     |   如果有参数，参数表示权限，则其中任何一个权限可以访问\r\n     * hasAnyRole          |   如果有参数，参数表示角色，则其中任何一个角色可以访问\r\n     * hasAuthority        |   如果有参数，参数表示权限，则其权限可以访问\r\n     * hasIpAddress        |   如果有参数，参数表示IP地址，如果用户IP和参数匹配，则可以访问\r\n     * hasRole             |   如果有参数，参数表示角色，则其角色可以访问\r\n     * permitAll           |   用户可以任意访问\r\n     * rememberMe          |   允许通过remember-me登录的用户访问\r\n     * authenticated       |   用户登录后可访问\r\n     */\r\n    @Override\r\n    protected void configure(HttpSecurity httpSecurity) throws Exception\r\n    {\r\n        // 注解标记允许匿名访问的url\r\n        ExpressionUrlAuthorizationConfigurer<HttpSecurity>.ExpressionInterceptUrlRegistry registry = httpSecurity.authorizeRequests();\r\n        permitAllUrl.getUrls().forEach(url -> registry.antMatchers(url).permitAll());\r\n\r\n        httpSecurity\r\n                // CSRF禁用，因为不使用session\r\n                .csrf().disable()\r\n                // 禁用HTTP响应标头\r\n                .headers().cacheControl().disable().and()\r\n                // 认证失败处理类\r\n                .exceptionHandling().authenticationEntryPoint(unauthorizedHandler).and()\r\n                // 基于token，所以不需要session\r\n                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and()\r\n                // 过滤请求\r\n                .authorizeRequests()\r\n                // 对于登录login 注册register 验证码captchaImage 允许匿名访问\r\n                .antMatchers(\"/login\", \"/register\", \"/captchaImage\").permitAll()\r\n                // 静态资源，可匿名访问\r\n                .antMatchers(HttpMethod.GET, \"/\", \"/*.html\", \"/**/*.html\", \"/**/*.css\", \"/**/*.js\", \"/profile/**\").permitAll()\r\n                .antMatchers(\"/swagger-ui.html\", \"/swagger-resources/**\", \"/webjars/**\", \"/*/api-docs\", \"/druid/**\").permitAll()\r\n              //  .antMatchers(\"/labor/**\").permitAll()\r\n                // 除上面外的所有请求全部需要鉴权认证\r\n                .anyRequest().authenticated()\r\n                .and()\r\n                .headers().frameOptions().disable();\r\n        // 添加Logout filter\r\n        httpSecurity.logout().logoutUrl(\"/logout\").logoutSuccessHandler(logoutSuccessHandler);\r\n        // 添加JWT filter\r\n        httpSecurity.addFilterBefore(authenticationTokenFilter, UsernamePasswordAuthenticationFilter.class);\r\n        // 添加CORS filter\r\n        httpSecurity.addFilterBefore(corsFilter, JwtAuthenticationTokenFilter.class);\r\n        httpSecurity.addFilterBefore(corsFilter, LogoutFilter.class);\r\n    }\r\n\r\n    /**\r\n     * 强散列哈希加密实现\r\n     */\r\n    @Bean\r\n    public BCryptPasswordEncoder bCryptPasswordEncoder()\r\n    {\r\n        return new BCryptPasswordEncoder();\r\n    }\r\n\r\n    /**\r\n     * 身份认证接口\r\n     */\r\n    @Override\r\n    protected void configure(AuthenticationManagerBuilder auth) throws Exception\r\n    {\r\n        auth.userDetailsService(userDetailsService).passwordEncoder(bCryptPasswordEncoder());\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/laborBackend-framework/src/main/java/com/yuantu/framework/config/SecurityConfig.java b/laborBackend-framework/src/main/java/com/yuantu/framework/config/SecurityConfig.java
--- a/laborBackend-framework/src/main/java/com/yuantu/framework/config/SecurityConfig.java	(revision aa62bc6d0c2f0b21cd307df5288b5de5dd2479e7)
+++ b/laborBackend-framework/src/main/java/com/yuantu/framework/config/SecurityConfig.java	(date 1700189630595)
@@ -115,7 +115,7 @@
                 // 静态资源，可匿名访问
                 .antMatchers(HttpMethod.GET, "/", "/*.html", "/**/*.html", "/**/*.css", "/**/*.js", "/profile/**").permitAll()
                 .antMatchers("/swagger-ui.html", "/swagger-resources/**", "/webjars/**", "/*/api-docs", "/druid/**").permitAll()
-              //  .antMatchers("/labor/**").permitAll()
+                .antMatchers("/labor/**").permitAll()
                 // 除上面外的所有请求全部需要鉴权认证
                 .anyRequest().authenticated()
                 .and()
Index: laborBackend-admin/src/main/java/com/yuantu/web/controller/labor/EmpResumeController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.yuantu.web.controller.labor;\r\n\r\nimport com.yuantu.common.annotation.Excel;\r\nimport com.yuantu.common.annotation.Log;\r\nimport com.yuantu.common.core.controller.BaseController;\r\nimport com.yuantu.common.core.domain.AjaxResult;\r\nimport com.yuantu.common.core.domain.model.LoginUser;\r\nimport com.yuantu.common.core.page.TableDataInfo;\r\nimport com.yuantu.common.enums.BusinessType;\r\nimport com.yuantu.common.utils.poi.ExcelUtil;\r\nimport com.yuantu.labor.cenum.ResumeTypeEnum;\r\nimport com.yuantu.labor.domain.EmpResume;\r\nimport com.yuantu.labor.domain.Employee;\r\nimport com.yuantu.labor.service.IEmpResumeService;\r\nimport com.yuantu.labor.service.IEmployeeService;\r\nimport com.yuantu.labor.vo.*;\r\nimport io.swagger.annotations.Api;\r\nimport io.swagger.annotations.ApiOperation;\r\nimport org.springframework.beans.BeanUtils;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.security.access.prepost.PreAuthorize;\r\nimport org.springframework.util.CollectionUtils;\r\nimport org.springframework.util.ReflectionUtils;\r\nimport org.springframework.web.bind.annotation.*;\r\nimport org.springframework.web.multipart.MultipartFile;\r\n\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport java.lang.reflect.Field;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n/**\r\n * 履历Controller\r\n *\r\n * @author ruoyi\r\n * @date 2023-09-12\r\n */\r\n@Api(\"履历管理\")\r\n@RestController\r\n@RequestMapping(\"/labor/resume\")\r\npublic class EmpResumeController extends BaseController {\r\n    @Autowired\r\n    private IEmpResumeService empResumeService;\r\n\r\n    @Autowired\r\n    private IEmployeeService employeeService;\r\n\r\n    /**\r\n     * 查询履历列表\r\n     */\r\n    @ApiOperation(\"查询履历列表\")\r\n    @PreAuthorize(\"@ss.hasPermi('labor:resume:list')\")\r\n    @GetMapping(\"/list\")\r\n    public TableDataInfo list(EmpResume empResume) {\r\n        startPage();\r\n        List<EmpResume> list = empResumeService.selectEmpResumeList(empResume);\r\n        return getDataTable(list);\r\n    }\r\n\r\n    /**\r\n     * 导出履历列表\r\n     */\r\n    @ApiOperation(\"导出履历列表\")\r\n    @PreAuthorize(\"@ss.hasPermi('labor:resume:export')\")\r\n    @Log(title = \"履历\", businessType = BusinessType.EXPORT)\r\n    @PostMapping(\"/export/{resuIds}\")\r\n    public void export(HttpServletResponse response, @PathVariable Integer[] resuIds) {\r\n        EmpResumeVO vo = new EmpResumeVO();\r\n        vo.setResuIds(resuIds);\r\n        List<EmpResume> list = empResumeService.selectEmpResumeListByWhere(vo);\r\n        ExcelUtil<EmpResume> util = new ExcelUtil<EmpResume>(EmpResume.class);\r\n        util.exportExcel(response, list, \"履历数据\");\r\n    }\r\n\r\n    /**\r\n     * 获取履历详细信息\r\n     */\r\n    @ApiOperation(\"根据id获取履历详细信息\")\r\n    @PreAuthorize(\"@ss.hasPermi('labor:resume:getInfo')\")\r\n    @GetMapping(value = \"/getInfo/{resuId}\")\r\n    public AjaxResult getInfo(@PathVariable(\"resuId\") Integer resuId) {\r\n        return success(empResumeService.selectEmpResumeByResuId(resuId));\r\n    }\r\n\r\n\r\n    @ApiOperation(\"下载履历模板 type 1社会 2项目 3本单位\")\r\n    @PostMapping(\"/download/template\")\r\n    public void downloadTemplate(HttpServletResponse response, @RequestParam String type) {\r\n        //下载自动模板\r\n        //empResumeService.downloadResumeExcel(response, type);\r\n        //下载静态模板\r\n        empResumeService.downloadTemplate(response, type);\r\n    }\r\n\r\n\r\n    @ApiOperation(\"导入履历数据 type 1社会 2项目 3本单位\")\r\n    @PostMapping(\"/importData\")\r\n    public AjaxResult importData(@RequestBody MultipartFile file, @RequestParam String type) {\r\n        LoginUser loginUser = getLoginUser();\r\n        return success(empResumeService.importEmpResumeData(file, loginUser, type));\r\n    }\r\n\r\n\r\n    /**\r\n     * 导出员工列表\r\n     */\r\n    @ApiOperation(\"直接导出履历信息 type 1社会 2项目 3本单位\")\r\n    //@PreAuthorize(\"@ss.hasPermi('labor:employee:export')\")\r\n    @Log(title = \"履历\", businessType = BusinessType.EXPORT)\r\n    @PostMapping(\"/export\")\r\n    public void export(HttpServletResponse response, @RequestBody EmpResumeExportVO empResumeExport) {\r\n        List<EmpResume> list = empResumeService.selectEmpResumeExportInfos(empResumeExport);\r\n        if (ResumeTypeEnum.ONE.getKey().equals(empResumeExport.getType())) {\r\n            ExcelUtil<ResumeSocialTemplateVO> util = new ExcelUtil<>(ResumeSocialTemplateVO.class);\r\n            Field[] declaredFields = ResumeSocialTemplateVO.class.getDeclaredFields();\r\n            List<String> fieldNamesWithExcel = new ArrayList<>();\r\n            for (Field field : declaredFields) {\r\n                ReflectionUtils.makeAccessible(field);\r\n                if (field.isAnnotationPresent(Excel.class)) {\r\n                    fieldNamesWithExcel.add(field.getName());\r\n                }\r\n            }\r\n            List<String> excludeFieldNames = new ArrayList<>();\r\n            List<String> fieldNames = empResumeExport.getFieldNames();\r\n            if (!CollectionUtils.isEmpty(fieldNames)) {\r\n                for (String s : fieldNamesWithExcel) {\r\n                    if (!fieldNames.contains(s)) {\r\n                        excludeFieldNames.add(s);\r\n                    }\r\n                }\r\n                if (!CollectionUtils.isEmpty(excludeFieldNames)) {\r\n                    String[] excludeArr = new String[excludeFieldNames.size()];\r\n                    excludeFieldNames.toArray(excludeArr);\r\n                    util.hideColumn(excludeArr);\r\n                }\r\n            }\r\n            List<ResumeSocialTemplateVO> resumeSocials = new ArrayList<>();\r\n            for (EmpResume empResume : list) {\r\n                ResumeSocialTemplateVO resumeSocial = new ResumeSocialTemplateVO();\r\n                BeanUtils.copyProperties(empResume, resumeSocial);\r\n                resumeSocials.add(resumeSocial);\r\n            }\r\n            util.exportExcel(response, resumeSocials, \"履历数据\");\r\n        }\r\n        if (ResumeTypeEnum.TWO.getKey().equals(empResumeExport.getType())) {\r\n            ExcelUtil<ResumeProjectTemplateVO> util = new ExcelUtil<>(ResumeProjectTemplateVO.class);\r\n            Field[] declaredFields = ResumeProjectTemplateVO.class.getDeclaredFields();\r\n            List<String> fieldNamesWithExcel = new ArrayList<>();\r\n            for (Field field : declaredFields) {\r\n                ReflectionUtils.makeAccessible(field);\r\n                if (field.isAnnotationPresent(Excel.class)) {\r\n                    fieldNamesWithExcel.add(field.getName());\r\n                }\r\n            }\r\n            List<String> excludeFieldNames = new ArrayList<>();\r\n            excludeFieldNames.add(\"resuContext\");\r\n            List<String> fieldNames = empResumeExport.getFieldNames();\r\n            if (!CollectionUtils.isEmpty(fieldNames)) {\r\n                for (String s : fieldNamesWithExcel) {\r\n                    if (!fieldNames.contains(s)) {\r\n                        excludeFieldNames.add(s);\r\n                    }\r\n                }\r\n                if (!CollectionUtils.isEmpty(excludeFieldNames)) {\r\n                    String[] excludeArr = new String[excludeFieldNames.size()];\r\n                    excludeFieldNames.toArray(excludeArr);\r\n                    util.hideColumn(excludeArr);\r\n                }\r\n            }\r\n            List<ResumeProjectTemplateVO> resumeProjects = new ArrayList<>();\r\n            for (EmpResume empResume : list) {\r\n                ResumeProjectTemplateVO resumeProject = new ResumeProjectTemplateVO();\r\n                BeanUtils.copyProperties(empResume, resumeProject);\r\n                resumeProjects.add(resumeProject);\r\n            }\r\n            util.exportExcel(response, resumeProjects, \"履历数据\");\r\n        }\r\n\r\n        if (ResumeTypeEnum.THREE.getKey().equals(empResumeExport.getType())) {\r\n            ExcelUtil<ResumeUnitTemplateVO> util = new ExcelUtil<>(ResumeUnitTemplateVO.class);\r\n            Field[] declaredFields = ResumeUnitTemplateVO.class.getDeclaredFields();\r\n            List<String> fieldNamesWithExcel = new ArrayList<>();\r\n            for (Field field : declaredFields) {\r\n                ReflectionUtils.makeAccessible(field);\r\n                if (field.isAnnotationPresent(Excel.class)) {\r\n                    fieldNamesWithExcel.add(field.getName());\r\n                }\r\n            }\r\n            List<String> excludeFieldNames = new ArrayList<>();\r\n            List<String> fieldNames = empResumeExport.getFieldNames();\r\n            if (!CollectionUtils.isEmpty(fieldNames)) {\r\n                for (String s : fieldNamesWithExcel) {\r\n                    if (!fieldNames.contains(s)) {\r\n                        excludeFieldNames.add(s);\r\n                    }\r\n                }\r\n                if (!CollectionUtils.isEmpty(excludeFieldNames)) {\r\n                    String[] excludeArr = new String[excludeFieldNames.size()];\r\n                    excludeFieldNames.toArray(excludeArr);\r\n                    util.hideColumn(excludeArr);\r\n                }\r\n            }\r\n            List<ResumeUnitTemplateVO> resumeUnits = new ArrayList<>();\r\n            for (EmpResume empResume : list) {\r\n                ResumeUnitTemplateVO resumeUnit = new ResumeUnitTemplateVO();\r\n                BeanUtils.copyProperties(empResume, resumeUnit);\r\n                resumeUnits.add(resumeUnit);\r\n            }\r\n            util.exportExcel(response, resumeUnits, \"履历数据\");\r\n        }\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * 表格拆分导出员工信息\r\n     */\r\n    @ApiOperation(\"表格拆分导出履历信息\")\r\n    //@PreAuthorize(\"@ss.hasPermi('labor:employee:export')\")\r\n    @Log(title = \"借工\", businessType = BusinessType.EXPORT)\r\n    @PostMapping(\"/export/divide\")\r\n    public void exportDivide(HttpServletResponse response, @RequestBody EmpResumeExportDivideVO empResumeExportDivide) {\r\n        empResumeService.exportDivide(response, empResumeExportDivide);\r\n    }\r\n\r\n\r\n    /**\r\n     * 新增履历\r\n     */\r\n    @ApiOperation(\"新增履历\")\r\n    @PreAuthorize(\"@ss.hasPermi('labor:resume:add')\")\r\n    @Log(title = \"履历\", businessType = BusinessType.INSERT)\r\n    @PostMapping(\"/add\")\r\n    public AjaxResult add(@RequestBody EmpResume empResume) {\r\n        if (empResume.getResuEmpName() == null) {\r\n            Employee emp = employeeService.selectEmployeeByEmpId(empResume.getResuEmpId());\r\n            empResume.setResuEmpName(emp.getEmpName());\r\n            empResume.setResuEmpIdcard(emp.getEmpIdcard());\r\n        }\r\n        return toAjax(empResumeService.insertEmpResume(empResume));\r\n    }\r\n\r\n    /**\r\n     * 修改履历\r\n     */\r\n    @ApiOperation(\"修改履历\")\r\n    @PreAuthorize(\"@ss.hasPermi('labor:resume:edit')\")\r\n    @Log(title = \"履历\", businessType = BusinessType.UPDATE)\r\n    @PutMapping(\"/edit\")\r\n    public AjaxResult edit(@RequestBody EmpResume empResume) {\r\n        return toAjax(empResumeService.updateEmpResume(empResume));\r\n    }\r\n\r\n    /**\r\n     * 删除履历\r\n     */\r\n    @ApiOperation(\"删除履历\")\r\n    @PreAuthorize(\"@ss.hasPermi('labor:resume:remove')\")\r\n    @Log(title = \"履历\", businessType = BusinessType.DELETE)\r\n    @DeleteMapping(\"/remove/{resuIds}\")\r\n    public AjaxResult remove(@PathVariable Integer[] resuIds) {\r\n        return toAjax(empResumeService.deleteEmpResumeByResuIds(resuIds));\r\n    }\r\n\r\n    /**\r\n     * 模糊查询指定的履历数据\r\n     *\r\n     * @param queryVO\r\n     * @return\r\n     */\r\n    @ApiOperation(\"根据条件查询指定的履历数据\")\r\n    @PreAuthorize(\"@ss.hasPermi('labor:resume:query')\")\r\n    @GetMapping(\"/queryResumes\")\r\n    public TableDataInfo queryResumes(EmpResumeVO queryVO) {\r\n        startPage();\r\n        List<EmpResume> resumeList = empResumeService.selectEmpResumeListByWhere(queryVO);\r\n        return getDataTable(resumeList);\r\n    }\r\n\r\n    /**\r\n     * 初始化新增页面\r\n     *\r\n     * @return\r\n     */\r\n    @ApiOperation(\"初始化新增履历页面数据，取得员工名称和身份证数据\")\r\n    @PreAuthorize(\"@ss.hasPermi('labor:resume:add')\")\r\n    @GetMapping(\"/initResume\")\r\n    public AjaxResult initResume() {\r\n        //System.out.println(\"开始了\");\r\n        AjaxResult ajax = AjaxResult.success();\r\n        List<EmpNameCardVO> empNameCardList = employeeService.selectEmpNameAndCard(new EmployeeInfoVO());\r\n        ajax.put(\"empNameAndCardData\", empNameCardList);\r\n        return ajax;\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/laborBackend-admin/src/main/java/com/yuantu/web/controller/labor/EmpResumeController.java b/laborBackend-admin/src/main/java/com/yuantu/web/controller/labor/EmpResumeController.java
--- a/laborBackend-admin/src/main/java/com/yuantu/web/controller/labor/EmpResumeController.java	(revision aa62bc6d0c2f0b21cd307df5288b5de5dd2479e7)
+++ b/laborBackend-admin/src/main/java/com/yuantu/web/controller/labor/EmpResumeController.java	(date 1700202342152)
@@ -61,7 +61,7 @@
      * 导出履历列表
      */
     @ApiOperation("导出履历列表")
-    @PreAuthorize("@ss.hasPermi('labor:resume:export')")
+    //@PreAuthorize("@ss.hasPermi('labor:resume:export')")
     @Log(title = "履历", businessType = BusinessType.EXPORT)
     @PostMapping("/export/{resuIds}")
     public void export(HttpServletResponse response, @PathVariable Integer[] resuIds) {
@@ -76,7 +76,7 @@
      * 获取履历详细信息
      */
     @ApiOperation("根据id获取履历详细信息")
-    @PreAuthorize("@ss.hasPermi('labor:resume:getInfo')")
+    //@PreAuthorize("@ss.hasPermi('labor:resume:getInfo')")
     @GetMapping(value = "/getInfo/{resuId}")
     public AjaxResult getInfo(@PathVariable("resuId") Integer resuId) {
         return success(empResumeService.selectEmpResumeByResuId(resuId));
Index: laborBackend-admin/src/main/java/com/yuantu/web/controller/labor/EmpSalaryController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.yuantu.web.controller.labor;\r\n\r\nimport com.yuantu.common.annotation.Excel;\r\nimport com.yuantu.common.annotation.Log;\r\nimport com.yuantu.common.core.controller.BaseController;\r\nimport com.yuantu.common.core.domain.AjaxResult;\r\nimport com.yuantu.common.core.domain.model.LoginUser;\r\nimport com.yuantu.common.core.page.TableDataInfo;\r\nimport com.yuantu.common.enums.BusinessType;\r\nimport com.yuantu.common.utils.poi.ExcelUtil;\r\nimport com.yuantu.labor.domain.EmpSalary;\r\nimport com.yuantu.labor.domain.Employee;\r\nimport com.yuantu.labor.domain.SalaryConfig;\r\nimport com.yuantu.labor.service.IEmpSalaryService;\r\nimport com.yuantu.labor.service.IEmployeeService;\r\nimport com.yuantu.labor.service.ISalaryConfigService;\r\nimport com.yuantu.labor.vo.*;\r\nimport com.yuantu.system.service.impl.SysDictDataServiceImpl;\r\nimport io.swagger.annotations.ApiOperation;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.security.access.prepost.PreAuthorize;\r\nimport org.springframework.util.CollectionUtils;\r\nimport org.springframework.util.ReflectionUtils;\r\nimport org.springframework.web.bind.annotation.*;\r\nimport org.springframework.web.multipart.MultipartFile;\r\n\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport java.lang.reflect.Field;\r\nimport java.math.BigDecimal;\r\nimport java.util.ArrayList;\r\nimport java.util.Calendar;\r\nimport java.util.List;\r\n\r\n/**\r\n * 员工酬薪主Controller\r\n *\r\n * @author ruoyi\r\n * @date 2023-09-26\r\n */\r\n@ApiOperation(\"员工薪资管理\")\r\n@RestController\r\n@RequestMapping(\"/labor/salary\")\r\npublic class EmpSalaryController extends BaseController {\r\n    @Autowired\r\n    private IEmpSalaryService empSalaryService;\r\n    @Autowired\r\n    private IEmployeeService employeeService;\r\n    @Autowired\r\n    private ISalaryConfigService salaryConfigService;\r\n    @Autowired\r\n    private SysDictDataServiceImpl sysDictDataService;\r\n\r\n    /**\r\n     * 查询员工酬薪主列表\r\n     */\r\n    @ApiOperation(\"查询员工酬薪主列表\")\r\n    @PreAuthorize(\"@ss.hasPermi('labor:salary:list')\")\r\n    @GetMapping(\"/list\")\r\n    public TableDataInfo list(EmpSalary empSalary) {\r\n        startPage();\r\n        List<EmpSalary> list = empSalaryService.selectEmpSalaryList(empSalary);\r\n        return getDataTable(list);\r\n    }\r\n\r\n    /**\r\n     * 导出员工酬薪主列表\r\n     */\r\n    @ApiOperation(\"导出员工酬薪主列表\")\r\n    @PreAuthorize(\"@ss.hasPermi('labor:salary:export')\")\r\n    @Log(title = \"员工酬薪主\", businessType = BusinessType.EXPORT)\r\n    @GetMapping(\"/export/{salaryIds}\")\r\n    public void export(HttpServletResponse response, @PathVariable Integer[] salaryIds) {\r\n        EmpSalaryQueryVO vo = new EmpSalaryQueryVO();\r\n\r\n        List<EmpSalaryResultVO> list = empSalaryService.selectSalaryAndItemBySalaryIds(salaryIds);\r\n        ExcelUtil<EmpSalaryResultVO> util = new ExcelUtil<EmpSalaryResultVO>(EmpSalaryResultVO.class);\r\n        util.exportExcel(response, list, \"员工酬薪主数据\");\r\n    }\r\n\r\n    /**\r\n     * 获取员工酬薪主详细信息\r\n     */\r\n    @ApiOperation(\"获取员工酬薪主详细信息\")\r\n    @PreAuthorize(\"@ss.hasPermi('labor:salary:query')\")\r\n    @GetMapping(value = \"/getInfo/{salaryId}\")\r\n    public AjaxResult getInfo(@PathVariable(\"salaryId\") Integer salaryId) {\r\n        return success(empSalaryService.selectSalaryAndItemBySalaryId(salaryId));\r\n    }\r\n\r\n    /**\r\n     * 新增员工酬薪主\r\n     */\r\n    @ApiOperation(\"新增员工酬薪\")\r\n    @PreAuthorize(\"@ss.hasPermi('labor:salary:add')\")\r\n    @Log(title = \"员工酬薪主\", businessType = BusinessType.INSERT)\r\n    @PostMapping(\"/add\")\r\n    public AjaxResult add(@RequestBody EmpSalary empSalary) {\r\n        Employee emp = employeeService.selectEmployeeByEmpId(empSalary.getSalaryEmpId());\r\n        empSalary.setSalaryEmpName(emp.getEmpName());\r\n        empSalary.setSalaryEmpIdcard(emp.getEmpIdcard());\r\n\r\n        Integer result = empSalaryService.checkSalarytUnique(empSalary);\r\n        if (result != null) {\r\n            return error(\"增加\" + empSalary.getSalaryEmpName() + \"的\" + empSalary.getSalaryYearMonth() + \"工资失败，该月薪酬已经存在\");\r\n        }\r\n        String username = getUsername();\r\n        return toAjax(empSalaryService.insertEmpSalary(empSalary, username));\r\n    }\r\n\r\n    /**\r\n     * 修改员工酬薪主\r\n     */\r\n    @ApiOperation(\"修改员工酬薪主\")\r\n    @PreAuthorize(\"@ss.hasPermi('labor:salary:edit')\")\r\n    @Log(title = \"员工酬薪主\", businessType = BusinessType.UPDATE)\r\n    @PutMapping(\"/edit\")\r\n    public AjaxResult edit(@RequestBody EmpSalary empSalary) {\r\n        String username = getUsername();\r\n        return toAjax(empSalaryService.updateEmpSalary(empSalary, username));\r\n    }\r\n\r\n    /**\r\n     * 删除员工酬薪主\r\n     */\r\n    @ApiOperation(\"删除员工酬薪主\")\r\n    @PreAuthorize(\"@ss.hasPermi('labor:salary:query')\")\r\n    @Log(title = \"员工酬薪主\", businessType = BusinessType.DELETE)\r\n    @DeleteMapping(\"/remove/{salaryIds}\")\r\n    public AjaxResult remove(@PathVariable Integer[] salaryIds) {\r\n        return toAjax(empSalaryService.deleteEmpSalaryBySalaryIds(salaryIds));\r\n    }\r\n\r\n    @ApiOperation(\"初始化新增页面，返回员工列表，薪酬配置列表\")\r\n    //@PreAuthorize(\"@ss.hasPermi('labor:salary:query')\")\r\n    @GetMapping(\"/initAdd\")\r\n    public AjaxResult initAdd() {\r\n        //返回员工列表\r\n        EmployeeInfoVO infoVO = new EmployeeInfoVO();\r\n        List<String> statusList = new ArrayList<>();\r\n        statusList.add(\"1\");\r\n        statusList.add(\"2\");\r\n        statusList.add(\"5\");\r\n        statusList.add(\"6\");\r\n        statusList.add(\"7\");\r\n        infoVO.setEmpStatusList(statusList);\r\n        List<EmpNameCardVO> empNameCardList = employeeService.selectEmpNameAndCard(infoVO);\r\n\r\n        //返回薪酬配置列表\r\n        List<SalaryConfig> salaryConfigList = salaryConfigService.selectSalaryConfigList(new SalaryConfig());\r\n\r\n        AjaxResult ajax = AjaxResult.success();\r\n        ajax.put(\"empNameCardData\", empNameCardList);\r\n        ajax.put(\"salaryConfigData\", salaryConfigList);\r\n        return ajax;\r\n    }\r\n\r\n    @ApiOperation(\"初始化修改页面，返回员工月份薪酬对象\")\r\n    @PreAuthorize(\"@ss.hasPermi('labor:salary:query')\")\r\n    @GetMapping(\"/initEdit/{salaryId}\")\r\n    public AjaxResult initEdit(@PathVariable(\"salaryId\") Integer salaryId) {\r\n        return success(empSalaryService.selectSalaryAndItemBySalaryId(salaryId));\r\n    }\r\n\r\n    /**\r\n     * 根据条件删选查询月度薪资列表\r\n     * 月份开始：beginMonth;\r\n     * 月份结束：endMonth;\r\n     * 用户名：empName;\r\n     * 身份证；empIdcard;\r\n     * 部门id；empDeptId;\r\n     * 部门名称：empDeptName;\r\n     * 应发工资区间：minSalaryPayableNum,maxSalaryPayableNum;\r\n     * 公积金个缴区间：minSalaryPersonFund,maxSalaryPersonFund;\r\n     * 实发工资区间：minSalaryNetPay,maxSalaryNetPay;\r\n     * 岗位: empPosition;\r\n     * 岗级:empPositionLevel;\r\n     * 劳务公司：empHrCompany;\r\n     *\r\n     * @param queryVO\r\n     * @return\r\n     */\r\n    @ApiOperation(\"根据条件删选查询月度薪资列表\")\r\n    @PreAuthorize(\"@ss.hasPermi('labor:salary:query')\")\r\n    @GetMapping(\"/querySalery\")\r\n    public TableDataInfoVO querySalary(EmpSalaryQueryVO queryVO) {\r\n        if (queryVO.getMonthInterval() != null) {\r\n            String interval = queryVO.getMonthInterval();\r\n            queryVO.setBeginMonth(interval.substring(0, 7));\r\n            queryVO.setEndMonth(interval.substring(interval.length() - 7));\r\n        }\r\n        //System.out.println(queryVO.toString());\r\n\r\n        startPage();\r\n\r\n        SalaryTableDataVO vo = empSalaryService.selectSalarDataByWhere(queryVO);\r\n        TableDataInfoVO rspData = new TableDataInfoVO();\r\n\r\n        rspData.setColumns(vo.getItemTitles());\r\n        rspData.setColData(vo.getItemData());\r\n\r\n        TableDataInfo subInfo = getDataTable(vo.getSalaryMainData());\r\n\r\n        rspData.setCode(subInfo.getCode());\r\n        rspData.setMsg(subInfo.getMsg());\r\n        rspData.setRows(subInfo.getRows());\r\n        rspData.setTotal(subInfo.getTotal());\r\n\r\n        rspData.setCheckMsgs(vo.getCheckMsgs());\r\n\r\n        return rspData;\r\n    }\r\n\r\n\r\n    @ApiOperation(value = \"下载薪资信息模板\")\r\n    @GetMapping(\"/excel/download\")\r\n    public void downloadExcel(HttpServletResponse response) {\r\n        try {\r\n            empSalaryService.downloadExcelTemplate(response);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n\r\n    @ApiOperation(\"导入员工工资数据\")\r\n   // @PreAuthorize(\"@ss.hasPermi('labor:worker:importData')\")\r\n    @PostMapping(\"/importData\")\r\n    public AjaxResult importData(MultipartFile file) {\r\n        LoginUser loginUser = getLoginUser();\r\n        return success(empSalaryService.importEmpSalaryData(file, loginUser));\r\n    }\r\n\r\n\r\n    /**\r\n     * 导出员工列表\r\n     */\r\n    @ApiOperation(\"直接导出员工薪资信息\")\r\n    // @PreAuthorize(\"@ss.hasPermi('labor:employee:export')\")\r\n    @Log(title = \"薪资\", businessType = BusinessType.EXPORT)\r\n    @PostMapping(\"/export\")\r\n    public void export(HttpServletResponse response, @RequestBody SalaryExportVO salaryExport) {\r\n        empSalaryService.exportSalaryInfos(response, salaryExport);\r\n    }\r\n\r\n\r\n    /**\r\n     * 表格拆分导出员工薪资信息\r\n     */\r\n    @ApiOperation(\"表格拆分导出薪资信息\")\r\n    //  @PreAuthorize(\"@ss.hasPermi('labor:employee:export')\")\r\n    @Log(title = \"借工\", businessType = BusinessType.EXPORT)\r\n    @PostMapping(\"/export/divide\")\r\n    public void exportDivide(HttpServletResponse response, @RequestBody EmpSalaryExportDivideVO empSalaryExportDivide) {\r\n        empSalaryService.exportDivide(response, empSalaryExportDivide);\r\n    }\r\n\r\n\r\n    /**\r\n     * 年度薪酬统计，查询参数封装在EmpSalaryQueryVO里的empName和year\r\n     * * empName里是员工名称或者身份证\r\n     *\r\n     * @param vo\r\n     * @return\r\n     */\r\n    @ApiOperation(\"年度薪酬统计\")\r\n    @PreAuthorize(\"@ss.hasPermi('labor:salary:query')\")\r\n    @GetMapping(\"/countByYear\")\r\n    public TableDataInfo countByYear(EmpSalaryQueryVO vo) {\r\n        startPage();\r\n        List<EmpSalaryYearCountVO> list = empSalaryService.countByYear(vo);\r\n        return getDataTable(list);\r\n    }\r\n\r\n    /**\r\n     * 没有复选框，那么导出是将查询出来数据导出，查询参数封装在EmpSalaryQueryVO里的empName和year\r\n     * empName里是员工名称或者身份证\r\n     *\r\n     * @param response\r\n     * @param vo\r\n     */\r\n    @ApiOperation(\"导出年度薪酬统计数据\")\r\n    //@PreAuthorize(\"@ss.hasPermi('labor:salary:export')\")\r\n    @Log(title = \"员工酬薪年度统计数据\", businessType = BusinessType.EXPORT)\r\n    @PostMapping(\"/exportYearCount\")\r\n    public void exportYearCount(HttpServletResponse response, EmpSalaryQueryVO vo) {\r\n        List<EmpSalaryYearCountVO> list = empSalaryService.countByYear(vo);\r\n        ExcelUtil<EmpSalaryYearCountVO> util = new ExcelUtil<EmpSalaryYearCountVO>(EmpSalaryYearCountVO.class);\r\n        util.exportExcel(response, list, \"员工酬薪年度统计数据\");\r\n    }\r\n\r\n    /**\r\n     * EmpSalaryQueryVO里的empId,year为参数，统计某员工在某年度薪资数据汇总\r\n     *\r\n     * @param vo\r\n     * @return\r\n     */\r\n    @ApiOperation(\"获取员工酬薪年度统计信息，需要员工id和年度为参数\")\r\n    @PreAuthorize(\"@ss.hasPermi('labor:salary:query')\")\r\n    @GetMapping(value = \"/getEmpYearCount\")\r\n    public AjaxResult getEmpYearCount(EmpSalaryQueryVO vo) {\r\n        return success(empSalaryService.getEmpYearCountr(vo));\r\n    }\r\n\r\n    /**\r\n     * 薪酬统计，下面是输入参数说明\r\n     * monthInterval:选择时间 例如：2022-01--2023-10\r\n     * empName:姓名和身份证\r\n     * empCategory：人员类别\r\n     * empEmployingUnits：单位名\r\n     * empDept：部门id\r\n     *\r\n     * @param queryVO\r\n     * @return\r\n     */\r\n    @ApiOperation(\"薪酬统计\")\r\n    @PreAuthorize(\"@ss.hasPermi('labor:salary:query')\")\r\n    @GetMapping(value = \"/countSalary\")\r\n    public TableDataInfo countSalary(EmpSalaryQueryVO queryVO) {\r\n        startPage();\r\n        List<EmpSalaryCountVO> list = empSalaryService.countSalary(queryVO);\r\n        return getDataTable(list);\r\n    }\r\n\r\n    @ApiOperation(\"直接导出年度薪酬统计信息\")\r\n    //@PreAuthorize(\"@ss.hasPermi('labor:salary:export')\")\r\n    @Log(title = \"年度薪酬统计\", businessType = BusinessType.EXPORT)\r\n    @PostMapping(\"/count/export\")\r\n    public void countExport(HttpServletResponse response, @RequestBody EmpSalaryCountYearExportVO empSalaryCountYearExport) {\r\n        List<EmpSalaryYearCountVO> list = empSalaryService.selectEmpSalaryCountYearExportInfos(empSalaryCountYearExport);\r\n        ExcelUtil<EmpSalaryYearCountVO> util = new ExcelUtil<>(EmpSalaryYearCountVO.class);\r\n        Field[] declaredFields = EmpSalaryYearCountVO.class.getDeclaredFields();\r\n        List<String> fieldNamesWithExcel = new ArrayList<>();\r\n        for (Field field : declaredFields) {\r\n            ReflectionUtils.makeAccessible(field);\r\n            if (field.isAnnotationPresent(Excel.class)) {\r\n                fieldNamesWithExcel.add(field.getName());\r\n            }\r\n        }\r\n        List<String> excludeFieldNames = new ArrayList<>();\r\n        List<String> fieldNames = empSalaryCountYearExport.getFieldNames();\r\n\r\n        if (fieldNames != null && fieldNames.size() > 0) {\r\n            for (String s : fieldNamesWithExcel) {\r\n                if (!fieldNames.contains(s)) {\r\n                    excludeFieldNames.add(s);\r\n                }\r\n            }\r\n            if (!CollectionUtils.isEmpty(excludeFieldNames)) {\r\n                String[] excludeArr = new String[excludeFieldNames.size()];\r\n                excludeFieldNames.toArray(excludeArr);\r\n                util.hideColumn(excludeArr);\r\n            }\r\n        }\r\n\r\n\r\n        util.exportExcel(response, list, \"年度薪酬统计\");\r\n    }\r\n\r\n    @ApiOperation(\"表格拆分导出年度薪酬统计信息\")\r\n    @PreAuthorize(\"@ss.hasPermi('labor:salary:export')\")\r\n    @Log(title = \"培训项目\", businessType = BusinessType.EXPORT)\r\n    @PostMapping(\"/count/export/divide\")\r\n    public void countExportDivide(HttpServletResponse response, @RequestBody EmpSalaryCountYearExportDivideVO empSalaryCountYearExportDivide) {\r\n        empSalaryService.exportDivideCountYear(response, empSalaryCountYearExportDivide);\r\n    }\r\n\r\n    /**\r\n     * 员工画像-薪酬信息\r\n     * employee:员工基本信息\r\n     * salaryLevelName:当前薪级\r\n     * lastMonthNetPay:上月实发薪酬\r\n     * bilateralInsurancesFund:上月双边五险一金\r\n     * lastYearNetPay:上一年度实发薪酬\r\n     * pastYearNetPayChart:近一年个人薪酬情况\r\n     * @param empId\r\n     * @return\r\n     */\r\n    @ApiOperation(\"员工画像-薪酬信息\")\r\n    @PreAuthorize(\"@ss.hasPermi('labor:salary:query')\")\r\n    @GetMapping(\"/portrait/{empId}\")\r\n    public AjaxResult getTrainInfo(@PathVariable(\"empId\") Long empId){\r\n        AjaxResult ajax = AjaxResult.success();\r\n        //员工信息\r\n        Employee employee = employeeService.selectEmployeeByEmpId(Long.valueOf(empId));\r\n        //岗级，取自员工信息\r\n        String salaryLevelName = sysDictDataService.selectDictLabel(\"emp_salary_level\",employee.getEmpSalaryLevel());\r\n        //上月实发薪酬\r\n        EmpSalary queryEmpSalary = new EmpSalary();\r\n        Calendar calendar = Calendar.getInstance();\r\n        calendar.add(Calendar.MONTH, -1);\r\n        int lastMonth = calendar.get(Calendar.MONTH) + 1;\r\n        String month = lastMonth>=10?lastMonth+\"\":(\"0\"+lastMonth);\r\n\r\n        int year = calendar.get(Calendar.YEAR);\r\n        queryEmpSalary.setSalaryYearMonth(year+\"-\"+month);\r\n        queryEmpSalary.setSalaryEmpId(empId);\r\n        List<EmpSalary> empSalaryList = empSalaryService.selectEmpSalaryList(queryEmpSalary);\r\n        String lastMonthNetPay  = \"0\";\r\n\r\n        BigDecimal bilateralInsurancesFund = BigDecimal.ZERO;\r\n\r\n\r\n        if(empSalaryList!=null&&empSalaryList.size()>0){\r\n            EmpSalary empSalary = empSalaryList.get(0);\r\n            lastMonthNetPay = empSalary.getSalaryNetPay();\r\n            BigDecimal insurances = empSalaryService.sumSalaryItemBySalaryType(empSalary.getSalaryId(),\"保险齐缴\");\r\n            System.out.println(\"保险齐缴：\"+insurances.toString());\r\n            //先算保险齐缴\r\n            bilateralInsurancesFund = bilateralInsurancesFund.add(insurances);\r\n            //再算保险金个缴X2\r\n            BigDecimal bilateralFund = new BigDecimal(empSalary.getSalaryPersonFund());\r\n            System.out.println(\"公积金： \"+bilateralFund.toString());\r\n\r\n            bilateralInsurancesFund = bilateralInsurancesFund.add(bilateralFund.multiply(BigDecimal.valueOf(2)));\r\n\r\n        }\r\n\r\n        //上月双边五险一金\r\n\r\n\r\n        //上一年度实发薪酬\r\n        Calendar calendar2 = Calendar.getInstance();\r\n        calendar2.add(Calendar.YEAR, -1);\r\n        int lastYear = calendar2.get(Calendar.YEAR);\r\n        EmpSalary empSalary = new EmpSalary();\r\n        empSalary.setSalaryEmpId(empId);\r\n        empSalary.setSalaryYearMonth(lastYear+\"\");\r\n        String lastYearNetPay = empSalaryService.sumLastYearNetPay(empSalary);\r\n\r\n        //近一年个人薪酬情况\r\n        EmpSalaryQueryVO queryVO = new EmpSalaryQueryVO();\r\n        queryVO.setEmpId(empId.intValue());\r\n        queryVO.setEndMonth(year+\"-\"+month);\r\n\r\n        Calendar calendar3 = Calendar.getInstance();\r\n        calendar3.add(Calendar.MONTH, -12);\r\n        int beginYearMonth = calendar3.get(Calendar.MONTH) + 1;\r\n        String beginMonth = beginYearMonth>=10?beginYearMonth+\"\":(\"0\"+beginYearMonth);\r\n\r\n        int beginYear = calendar3.get(Calendar.YEAR);\r\n        queryVO.setBeginMonth(beginYear+\"-\"+beginMonth);\r\n\r\n        List<SalaryChartVO> charts = empSalaryService.countPastYearNetPay(queryVO);\r\n\r\n        ajax.put(\"employee\",employee);\r\n        ajax.put(\"salaryLevelName\",salaryLevelName);\r\n        ajax.put(\"lastMonthNetPay\",lastMonthNetPay);\r\n        ajax.put(\"bilateralInsurancesFund\",bilateralInsurancesFund);\r\n        ajax.put(\"lastYearNetPay\",lastYearNetPay);\r\n        ajax.put(\"pastYearNetPayChart\",charts);\r\n\r\n        return  ajax;\r\n    }\r\n\r\n    /**\r\n     * 产值情况分析\r\n     * @return\r\n     */\r\n    @ApiOperation(\"产值情况分析\")\r\n    @PreAuthorize(\"@ss.hasPermi('labor:salary:query')\")\r\n    @GetMapping(\"/outputValueAnalysis\")\r\n    public AjaxResult getOutputValueAnalysis(){\r\n        Calendar calendar = Calendar.getInstance();\r\n        int year = calendar.get(Calendar.YEAR);\r\n        OutputValueAnalysisVO vo = empSalaryService.getOutputValueAnalysis(year+\"\");\r\n        return AjaxResult.success(vo);\r\n    }\r\n\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/laborBackend-admin/src/main/java/com/yuantu/web/controller/labor/EmpSalaryController.java b/laborBackend-admin/src/main/java/com/yuantu/web/controller/labor/EmpSalaryController.java
--- a/laborBackend-admin/src/main/java/com/yuantu/web/controller/labor/EmpSalaryController.java	(revision aa62bc6d0c2f0b21cd307df5288b5de5dd2479e7)
+++ b/laborBackend-admin/src/main/java/com/yuantu/web/controller/labor/EmpSalaryController.java	(date 1700200787097)
@@ -155,7 +155,7 @@
     }
 
     @ApiOperation("初始化修改页面，返回员工月份薪酬对象")
-    @PreAuthorize("@ss.hasPermi('labor:salary:query')")
+    //@PreAuthorize("@ss.hasPermi('labor:salary:query')")
     @GetMapping("/initEdit/{salaryId}")
     public AjaxResult initEdit(@PathVariable("salaryId") Integer salaryId) {
         return success(empSalaryService.selectSalaryAndItemBySalaryId(salaryId));
Index: laborBackend-admin/src/main/java/com/yuantu/web/controller/labor/EmpTrainController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.yuantu.web.controller.labor;\r\n\r\nimport com.yuantu.common.annotation.Excel;\r\nimport com.yuantu.common.annotation.Log;\r\nimport com.yuantu.common.core.controller.BaseController;\r\nimport com.yuantu.common.core.domain.AjaxResult;\r\nimport com.yuantu.common.core.domain.model.LoginUser;\r\nimport com.yuantu.common.core.page.TableDataInfo;\r\nimport com.yuantu.common.enums.BusinessType;\r\nimport com.yuantu.common.utils.poi.ExcelUtil;\r\nimport com.yuantu.labor.domain.EmpTrain;\r\nimport com.yuantu.labor.domain.Employee;\r\nimport com.yuantu.labor.domain.TrainProject;\r\nimport com.yuantu.labor.service.IEmpTrainService;\r\nimport com.yuantu.labor.service.IEmployeeService;\r\nimport com.yuantu.labor.service.ITrainProjectService;\r\nimport com.yuantu.labor.vo.*;\r\nimport io.swagger.annotations.Api;\r\nimport io.swagger.annotations.ApiOperation;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.security.access.prepost.PreAuthorize;\r\nimport org.springframework.util.CollectionUtils;\r\nimport org.springframework.util.ReflectionUtils;\r\nimport org.springframework.web.bind.annotation.*;\r\nimport org.springframework.web.multipart.MultipartFile;\r\n\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport java.lang.reflect.Field;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n/**\r\n * 培训记录Controller\r\n * \r\n * @author ruoyi\r\n * @date 2023-09-22\r\n */\r\n@Api(\"培训记录管理\")\r\n@RestController\r\n@RequestMapping(\"/labor/train\")\r\npublic class EmpTrainController extends BaseController\r\n{\r\n    @Autowired\r\n    private IEmpTrainService empTrainService;\r\n    @Autowired\r\n    private IEmployeeService employeeService;\r\n\r\n    @Autowired\r\n    private ITrainProjectService trainProjectService;\r\n    /**\r\n     * 查询培训记录列表\r\n     */\r\n\r\n    @ApiOperation(\"查询培训记录列表\")\r\n    @PreAuthorize(\"@ss.hasPermi('labor:train:list')\")\r\n    @GetMapping(\"/list\")\r\n    public TableDataInfo list(EmpTrain empTrain)\r\n    {\r\n        startPage();\r\n        List<EmpTrain> list = empTrainService.selectEmpTrainList(empTrain);\r\n        return getDataTable(list);\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * 获取培训记录详细信息\r\n     */\r\n    @ApiOperation(\"获取培训记录详细信息\")\r\n    @PreAuthorize(\"@ss.hasPermi('labor:train:query')\")\r\n    @GetMapping(value = \"/getInfo/{trainId}\")\r\n    public AjaxResult getInfo(@PathVariable(\"trainId\") Integer trainId)\r\n    {\r\n        return success(empTrainService.selectEmpTrainByTrainId(trainId));\r\n    }\r\n\r\n    /**\r\n     * 新增培训记录\r\n     */\r\n    @ApiOperation(\"新增培训记录\")\r\n    @PreAuthorize(\"@ss.hasPermi('labor:train:add')\")\r\n    @Log(title = \"培训记录\", businessType = BusinessType.INSERT)\r\n    @PostMapping(\"/add\")\r\n    public AjaxResult add(@RequestBody EmpTrain empTrain)\r\n    {\r\n\r\n        //补充人员名称和身份证数据\r\n        Employee emp = employeeService.selectEmployeeByEmpId(empTrain.getTrainEmpId());\r\n        empTrain.setTrainEmpName(emp.getEmpName());\r\n        empTrain.setTrainEmpIdcard(emp.getEmpIdcard());\r\n\r\n        //补充培训项目名称\r\n        TrainProject project = trainProjectService.selectTrainProjectByProjectId(empTrain.getTrainProjectId());\r\n        empTrain.setTrainProjectName(project.getProjectName());\r\n\r\n\r\n        //判断是否唯一\r\n        int result = empTrainService.checkEmpTrainUnique(empTrain);\r\n        //System.out.println(\"*********************result=\"+result);\r\n        if(result>0){\r\n            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\r\n            String timeTemp = sdf.format(empTrain.getTrainBeginTime());\r\n            return error(\"新增'\" + empTrain.getTrainEmpName() + \"'参加的'\"+empTrain.getTrainProjectName()+\"'的培训失败，在开始时间为\"+timeTemp+\"的培训记录已经存在\");\r\n        }\r\n\r\n        String username = getUsername();\r\n        return toAjax(empTrainService.insertEmpTrain(empTrain,username));\r\n    }\r\n\r\n    /**\r\n     * 修改培训记录\r\n     */\r\n\r\n    @ApiOperation(\"修改培训记录\")\r\n    @PreAuthorize(\"@ss.hasPermi('labor:train:edit')\")\r\n    @Log(title = \"培训记录\", businessType = BusinessType.UPDATE)\r\n    @PutMapping(\"/edit\")\r\n    public AjaxResult edit(@RequestBody EmpTrain empTrain)\r\n    {\r\n        //补充人员名称和身份证数据\r\n        Employee emp = employeeService.selectEmployeeByEmpId(empTrain.getTrainEmpId());\r\n        empTrain.setTrainEmpName(emp.getEmpName());\r\n        empTrain.setTrainEmpIdcard(emp.getEmpIdcard());\r\n        //补充培训项目名称\r\n        TrainProject project = trainProjectService.selectTrainProjectByProjectId(empTrain.getTrainProjectId());\r\n        empTrain.setTrainProjectName(project.getProjectName());\r\n\r\n\r\n        int result = empTrainService.checkEmpTrainUnique(empTrain);\r\n\r\n        if(result>0){\r\n            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\r\n            String timeTemp = sdf.format(empTrain.getTrainBeginTime());\r\n            return error(\"修改'\" + empTrain.getTrainEmpName() + \"'参加的'\"+empTrain.getTrainProjectName()+\"'的培训失败，在开始时间为\"+timeTemp+\"的培训记录已经存在\");\r\n        }\r\n        String username = getUsername();\r\n        return toAjax(empTrainService.updateEmpTrain(empTrain,username));\r\n    }\r\n\r\n    /**\r\n     * 删除培训记录\r\n     */\r\n    @ApiOperation(\"删除培训记录\")\r\n    @PreAuthorize(\"@ss.hasPermi('labor:train:remove')\")\r\n    @Log(title = \"培训记录\", businessType = BusinessType.DELETE)\r\n\t@DeleteMapping(\"/remove/{trainIds}\")\r\n    public AjaxResult remove(@PathVariable Integer[] trainIds)\r\n    {\r\n        return toAjax(empTrainService.deleteEmpTrainByTrainIds(trainIds));\r\n    }\r\n\r\n    /**\r\n     * 根据条件查询培训记录列表\r\n     * 培训性质:projectNature;\r\n     * 所属公司:trainWorkUnitsName;\r\n     * 劳务公司:trainHrCompanyName;\r\n     * 培训项目:trainProjectName;\r\n     * 学时:minTrainPeriod,maxTrainPeriod;\r\n     * 培训费用(元):minTrainFee,maxTrainFee;\r\n     * 培训地址/方式:trainAddrMethod;\r\n     * 开始时间：trainBeginTime;\r\n     * 结束时间:trainEndTime;\r\n     * 考核方式（考评、考试）：trainExamMethod;\r\n     * 姓名：trainEmpName;\r\n     * 身份证号：trainEmpIdcard;\r\n     * 开始修改时间：beginUpdateTime;\r\n     * 结束修改时间：endUpdateTime;\r\n     * @param queryVO\r\n     * @return\r\n     */\r\n    @ApiOperation(\"根据条件查询培训记录列表\")\r\n    @PreAuthorize(\"@ss.hasPermi('labor:train:query')\")\r\n    @GetMapping(\"/queryTrain\")\r\n    public TableDataInfo queryTrain(EmpTrainQueryVO queryVO)\r\n    {\r\n        startPage();\r\n        List<EmpTrainResultVO> list = empTrainService.selectEmpTrainListByWhere(queryVO);\r\n        return getDataTable(list);\r\n    }\r\n    @ApiOperation(\"初始化新增页面，返回员工列表，培训项目列表，所属公司和劳务公司列表\")\r\n    @PreAuthorize(\"@ss.hasPermi('labor:train:query')\")\r\n    @GetMapping(\"/initAdd\")\r\n    public  AjaxResult initAdd(){\r\n\r\n        //取得员工列表\r\n        EmployeeInfoVO infoVO = new EmployeeInfoVO();\r\n        List<String> statusList = new ArrayList<>();\r\n        statusList.add(\"1\");\r\n        statusList.add(\"2\");\r\n        statusList.add(\"5\");\r\n        statusList.add(\"6\");\r\n        statusList.add(\"7\");\r\n        infoVO.setEmpStatusList(statusList);\r\n        List<EmpNameCardVO>  empNameCardList = employeeService.selectEmpNameAndCard(infoVO);\r\n\r\n        //取得培训项目列表\r\n        List<TrainProject>  projectList = trainProjectService.selectTrainProjectList(new TrainProject());\r\n\r\n        AjaxResult ajax = AjaxResult.success();\r\n        ajax.put(\"projectData\",projectList);\r\n        ajax.put(\"empNameCardData\",empNameCardList);\r\n        return ajax;\r\n    }\r\n\r\n    @ApiOperation(\"初始化修改页面，返回员工数据，培训项目列表，所属公司和劳务公司列表\")\r\n    @PreAuthorize(\"@ss.hasPermi('labor:train:query')\")\r\n    @GetMapping(\"/initEdit/{empId}\")\r\n    public AjaxResult initEdit(@PathVariable(\"empId\") Integer empId){\r\n\r\n        //取得员工数据\r\n        EmpTrain empTrain = empTrainService.selectEmpTrainByTrainId(empId);\r\n\r\n        //取得培训项目列表\r\n        List<TrainProject>  projectList = trainProjectService.selectTrainProjectList(new TrainProject());\r\n\r\n        AjaxResult ajax = AjaxResult.success();\r\n        ajax.put(\"projectData\",projectList);\r\n        ajax.put(\"empTrainData\",empTrain);\r\n        return ajax;\r\n    }\r\n\r\n    /**\r\n     * 查询培训记录的统计数据，按照员工，培训性质，所属公司，劳务公司四个条件分组\r\n     * @param queryVO\r\n     * @return\r\n     */\r\n    @ApiOperation(\"查询培训记录统计表，按照员工，培训性质，所属公司，劳务公司四个条件分组\")\r\n    @PreAuthorize(\"@ss.hasPermi('labor:train:query')\")\r\n    @GetMapping(\"/counting\")\r\n    public AjaxResult counting(EmpTrainQueryVO queryVO)\r\n    {\r\n        startPage();\r\n        List<EmpTrainCountVO> list = empTrainService.selectEmpTrainCounting(queryVO);\r\n        AjaxResult result = AjaxResult.success();\r\n        String fee = empTrainService.countTrainFee(queryVO);\r\n        if(fee==null){\r\n            result.put(\"countFee\",0);\r\n        }else{\r\n            result.put(\"countFee\",fee);\r\n        }\r\n        Integer period = empTrainService.countTrainPeriod(queryVO);\r\n        if(period ==null){\r\n            result.put(\"cuontPeriod\",0);\r\n        }else{\r\n            result.put(\"cuontPeriod\",period);\r\n        }\r\n        result.put(\"dataTable\",getDataTable(list));\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * totalCount:统计总人次\r\n     * totalFee:统计培训费用\r\n     * totalProject:统计培训项目总数\r\n     * totalProject:培训总学时\r\n     * examMethodPieChart:培训完成饼图\r\n     * @param queryVO\r\n     * @return\r\n     */\r\n    @ApiOperation(\"查询统计总人数，统计培训费用，统计培训项目总数，培训总学时，培训完成饼图\")\r\n    //@PreAuthorize(\"@ss.hasPermi('labor:train:query')\")\r\n    @GetMapping(\"/trainCounting\")\r\n    public AjaxResult trainCount(EmpTrainQueryVO queryVO)\r\n    {\r\n        AjaxResult result = AjaxResult.success();\r\n        EmpTrainTotalVO totalVO = empTrainService.selectEmpTrainCountByMonth(queryVO);\r\n        if(totalVO!=null) {\r\n            //统计总人数\r\n            result.put(\"totalCount\",totalVO.getTotalCount());\r\n\r\n            //统计培训费用\r\n            result.put(\"totalFee\",totalVO.getTotalFee());\r\n\r\n            //统计培训项目总数\r\n            result.put(\"totalProject\",totalVO.getTotalProject());\r\n\r\n            //培训总学时\r\n            result.put(\"totalPeriod\",totalVO.getTotalPeriod());\r\n        }else{\r\n            result.put(\"totalCount\",0);\r\n\r\n            result.put(\"totalFee\",0);\r\n\r\n            result.put(\"totalProject\",0);\r\n\r\n            result.put(\"totalPeriod\",0);\r\n        }\r\n\r\n        //培训完成饼图\r\n        List<PieChartVO> chartVOs = empTrainService.countTrainExamMethod(queryVO);\r\n        result.put(\"examMethodPieChart\",chartVOs);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * trainFinishCount:培训项目总数\r\n     * trainProjectNatureCount：培训计划性质统计\r\n     * trainStatusCount：培训状态统计\r\n     * trainDeptCount：各部门培训数量统计\r\n     * @param queryVO\r\n     * @return\r\n     */\r\n    @ApiOperation(\"查询培训项目总数，培训计划性质统计，培训状态统计，各部门培训数量统计\")\r\n    //@PreAuthorize(\"@ss.hasPermi('labor:train:query')\")\r\n    @GetMapping(\"/trainFinishCount\")\r\n    public AjaxResult trainFinishCount(EmpTrainQueryVO queryVO) {\r\n\r\n        AjaxResult result = AjaxResult.success();\r\n\r\n        result.put(\"trainFinishCount\",empTrainService.countProjectFinishByMonth(queryVO));\r\n        result.put(\"trainProjectNatureCount\",empTrainService.countProjectNatureByMonth(queryVO));\r\n        result.put(\"trainStatusCount\",empTrainService.countTrainFinishByMonth(queryVO));\r\n        result.put(\"trainDeptCount\",empTrainService.countDeptNumByMonth(queryVO));\r\n\r\n        return  result ;\r\n    }\r\n\r\n\r\n    /**\r\n     * 下载模板\r\n     * @param response\r\n     */\r\n    @ApiOperation(value = \"下载员工培训记录模板\")\r\n    //@PreAuthorize(\"@ss.hasPermi('labor:train:import')\")\r\n    @GetMapping(\"/excel/download\")\r\n    public void downloadExcel(HttpServletResponse response) {\r\n        try {\r\n            trainProjectService.downloadExcel(response,\"empTrain.xlsx\");\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 导入数据\r\n     * @param file\r\n     * @return\r\n     */\r\n    @ApiOperation(\"导入员工培训记录数据\")\r\n    //@PreAuthorize(\"@ss.hasPermi('labor:train:import')\")\r\n    @PostMapping(\"/importData\")\r\n    public AjaxResult importData(MultipartFile file) {\r\n        LoginUser loginUser = getLoginUser();\r\n        return success(empTrainService.importEmpTrainData(file, loginUser));\r\n    }\r\n    /**\r\n     * 导出员工列表\r\n     */\r\n    @ApiOperation(\"直接导出员工培训信息\")\r\n    //@PreAuthorize(\"@ss.hasPermi('labor:train:export')\")\r\n    @Log(title = \"培训项目\", businessType = BusinessType.EXPORT)\r\n    @PostMapping(\"/export\")\r\n    public void export(HttpServletResponse response, @RequestBody EmpTrainExportVO empTrainExport) {\r\n        List<EmpTrainResultVO> list = empTrainService.selectEmpTrainExportInfos(empTrainExport);\r\n        ExcelUtil<EmpTrainResultVO> util = new ExcelUtil<>(EmpTrainResultVO.class);\r\n        Field[] declaredFields = EmpTrainResultVO.class.getDeclaredFields();\r\n        List<String> fieldNamesWithExcel = new ArrayList<>();\r\n        for (Field field : declaredFields) {\r\n            ReflectionUtils.makeAccessible(field);\r\n            if (field.isAnnotationPresent(Excel.class)) {\r\n                fieldNamesWithExcel.add(field.getName());\r\n            }\r\n        }\r\n        List<String> excludeFieldNames = new ArrayList<>();\r\n        List<String> fieldNames = empTrainExport.getFieldNames();\r\n\r\n        if(fieldNames!=null && fieldNames.size()>0) {\r\n            for (String s : fieldNamesWithExcel) {\r\n                if (!fieldNames.contains(s)) {\r\n                    excludeFieldNames.add(s);\r\n                }\r\n            }\r\n            if (!CollectionUtils.isEmpty(excludeFieldNames)) {\r\n                String[] excludeArr = new String[excludeFieldNames.size()];\r\n                excludeFieldNames.toArray(excludeArr);\r\n                util.hideColumn(excludeArr);\r\n            }\r\n        }\r\n\r\n\r\n        util.exportExcel(response, list, \"员工培训数据\");\r\n    }\r\n\r\n\r\n    /**\r\n     * 表格拆分导出员工信息\r\n     */\r\n    @ApiOperation(\"表格拆分导出员工培训信息\")\r\n    //@PreAuthorize(\"@ss.hasPermi('labor:train:export')\")\r\n    @Log(title = \"培训项目\", businessType = BusinessType.EXPORT)\r\n    @PostMapping(\"/export/divide\")\r\n    public void exportDivide(HttpServletResponse response, @RequestBody EmpTrainExportDivideVO empTrainExportDivide) {\r\n        empTrainService.exportDivide(response, empTrainExportDivide);\r\n    }\r\n\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/laborBackend-admin/src/main/java/com/yuantu/web/controller/labor/EmpTrainController.java b/laborBackend-admin/src/main/java/com/yuantu/web/controller/labor/EmpTrainController.java
--- a/laborBackend-admin/src/main/java/com/yuantu/web/controller/labor/EmpTrainController.java	(revision aa62bc6d0c2f0b21cd307df5288b5de5dd2479e7)
+++ b/laborBackend-admin/src/main/java/com/yuantu/web/controller/labor/EmpTrainController.java	(date 1700201254851)
@@ -68,7 +68,7 @@
      * 获取培训记录详细信息
      */
     @ApiOperation("获取培训记录详细信息")
-    @PreAuthorize("@ss.hasPermi('labor:train:query')")
+    //@PreAuthorize("@ss.hasPermi('labor:train:query')")
     @GetMapping(value = "/getInfo/{trainId}")
     public AjaxResult getInfo(@PathVariable("trainId") Integer trainId)
     {
@@ -204,7 +204,7 @@
     }
 
     @ApiOperation("初始化修改页面，返回员工数据，培训项目列表，所属公司和劳务公司列表")
-    @PreAuthorize("@ss.hasPermi('labor:train:query')")
+    //@PreAuthorize("@ss.hasPermi('labor:train:query')")
     @GetMapping("/initEdit/{empId}")
     public AjaxResult initEdit(@PathVariable("empId") Integer empId){
 
Index: laborBackend-admin/src/main/java/com/yuantu/web/controller/labor/SalaryHistoryController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.yuantu.web.controller.labor;\r\n\r\nimport com.yuantu.common.annotation.Excel;\r\nimport com.yuantu.common.annotation.Log;\r\nimport com.yuantu.common.core.controller.BaseController;\r\nimport com.yuantu.common.core.domain.AjaxResult;\r\nimport com.yuantu.common.core.domain.model.LoginUser;\r\nimport com.yuantu.common.core.page.TableDataInfo;\r\nimport com.yuantu.common.enums.BusinessType;\r\nimport com.yuantu.common.utils.poi.ExcelUtil;\r\nimport com.yuantu.labor.domain.Employee;\r\nimport com.yuantu.labor.domain.SalaryHistory;\r\nimport com.yuantu.labor.service.IEmployeeService;\r\nimport com.yuantu.labor.service.ISalaryHistoryService;\r\nimport com.yuantu.labor.service.ITrainProjectService;\r\nimport com.yuantu.labor.vo.*;\r\nimport io.swagger.annotations.Api;\r\nimport io.swagger.annotations.ApiOperation;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.security.access.prepost.PreAuthorize;\r\nimport org.springframework.util.CollectionUtils;\r\nimport org.springframework.util.ReflectionUtils;\r\nimport org.springframework.web.bind.annotation.*;\r\nimport org.springframework.web.multipart.MultipartFile;\r\n\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport java.lang.reflect.Field;\r\nimport java.math.BigDecimal;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n/**\r\n * 薪级变动Controller\r\n *\r\n * @author ruoyi\r\n * @date 2023-10-07\r\n */\r\n@Api(\"薪级变动管理\")\r\n@RestController\r\n@RequestMapping(\"/labor/salaryhis\")\r\npublic class SalaryHistoryController extends BaseController {\r\n    @Autowired\r\n    private ISalaryHistoryService salaryHistoryService;\r\n    @Autowired\r\n    private IEmployeeService employeeService;\r\n    @Autowired\r\n    private ITrainProjectService trainProjectService;\r\n\r\n    /**\r\n     * 查询薪级变动列表\r\n     */\r\n    @ApiOperation(\"查询薪级变动列表\")\r\n    @PreAuthorize(\"@ss.hasPermi('labor:salaryhis:list')\")\r\n    @GetMapping(\"/list\")\r\n    public TableDataInfo list(SalaryHisQueryVO vo) {\r\n        startPage();\r\n        List<SalaryHistory> list = salaryHistoryService.selectSalaryHistoryList(vo);\r\n        return getDataTable(list);\r\n    }\r\n\r\n\r\n    /**\r\n     * 导出薪级变动列表\r\n\r\n     @ApiOperation(\"导出薪级变动列表\")\r\n     //@PreAuthorize(\"@ss.hasPermi('labor:salaryhis:export')\")\r\n     @Log(title = \"薪级变动\", businessType = BusinessType.EXPORT)\r\n     @PostMapping(\"/export/{hisIds}\") public void export(HttpServletResponse response, @PathVariable Integer[] hisIds)\r\n     {\r\n     SalaryHisQueryVO vo = new SalaryHisQueryVO();\r\n     vo.setHisIds(hisIds);\r\n     List<SalaryHistory> list = salaryHistoryService.selectSalaryHistoryList(vo);\r\n     ExcelUtil<SalaryHistory> util = new ExcelUtil<SalaryHistory>(SalaryHistory.class);\r\n     util.exportExcel(response, list, \"薪级变动数据\");\r\n     }\r\n     */\r\n    /**\r\n     * 获取薪级变动详细信息\r\n     */\r\n    @ApiOperation(\"获取薪级变动详细信息\")\r\n    @PreAuthorize(\"@ss.hasPermi('labor:salaryhis:query')\")\r\n    @GetMapping(value = \"/getInfo/{hisId}\")\r\n    public AjaxResult getInfo(@PathVariable(\"hisId\") Integer hisId) {\r\n        return success(salaryHistoryService.selectSalaryHistoryByHisId(hisId));\r\n    }\r\n\r\n    /**\r\n     * 新增薪级变动\r\n     */\r\n    @ApiOperation(\"新增薪级变动\")\r\n    @PreAuthorize(\"@ss.hasPermi('labor:salaryhis:add')\")\r\n    @Log(title = \"薪级变动\", businessType = BusinessType.INSERT)\r\n    @PostMapping(\"/add\")\r\n    public AjaxResult add(@RequestBody SalaryHistory salaryHistory) {\r\n        Employee emp = employeeService.selectEmployeeByEmpId(salaryHistory.getHisEmpId());\r\n        emp.setEmpSalaryLevel(salaryHistory.getHisNextLevel());\r\n        salaryHistory.setHisEmpIdcard(emp.getEmpIdcard());\r\n        salaryHistory.setHisEmpName(emp.getEmpName());\r\n\r\n        int result = salaryHistoryService.checkSalaryHisUnique(salaryHistory);\r\n        if (result > 0) {\r\n            return error(\"增加\" + salaryHistory.getHisEmpName() + \"的\" + salaryHistory.getHisYearMonth() + \"薪资变动失败，该月薪酬变动数据已经存在\");\r\n\r\n        }\r\n        return toAjax(salaryHistoryService.insertSalaryHistory(salaryHistory, emp));\r\n    }\r\n\r\n    /**\r\n     * 修改薪级变动\r\n     */\r\n    @ApiOperation(\"修改薪级变动\")\r\n    @PreAuthorize(\"@ss.hasPermi('labor:salaryhis:edit')\")\r\n    @Log(title = \"薪级变动\", businessType = BusinessType.UPDATE)\r\n    @PutMapping(\"/edit\")\r\n    public AjaxResult edit(@RequestBody SalaryHistory salaryHistory) {\r\n        return toAjax(salaryHistoryService.updateSalaryHistory(salaryHistory));\r\n    }\r\n\r\n    /**\r\n     * 删除薪级变动\r\n     */\r\n    @ApiOperation(\"删除薪级变动\")\r\n    @PreAuthorize(\"@ss.hasPermi('labor:salaryhis:remove')\")\r\n    @Log(title = \"薪级变动\", businessType = BusinessType.DELETE)\r\n    @DeleteMapping(\"/remove/{hisIds}\")\r\n    public AjaxResult remove(@PathVariable Integer[] hisIds) {\r\n        return toAjax(salaryHistoryService.deleteSalaryHistoryByHisIds(hisIds));\r\n    }\r\n\r\n    @ApiOperation(\" 初始化新增页面，返回员工列表\")\r\n    @PreAuthorize(\"@ss.hasPermi('labor:salaryhis:query')\")\r\n    @GetMapping(\"/initAdd\")\r\n    public AjaxResult initAdd() {\r\n        AjaxResult ajax = AjaxResult.success();\r\n        EmployeeInfoVO infoVO = new EmployeeInfoVO();\r\n        List<String> statusList = new ArrayList<>();\r\n        statusList.add(\"1\");\r\n        statusList.add(\"2\");\r\n        statusList.add(\"5\");\r\n        statusList.add(\"6\");\r\n        statusList.add(\"7\");\r\n        infoVO.setEmpStatusList(statusList);\r\n        List<EmpNameCardVO> empNameCardList = employeeService.selectEmpNameAndCard(infoVO);\r\n        ajax.put(\"empNameAndCardData\", empNameCardList);\r\n        return ajax;\r\n    }\r\n\r\n    @ApiOperation(\"初始化修改页面，返回员工修改历史记录\")\r\n    @PreAuthorize(\"@ss.hasPermi('labor:salaryhis:query')\")\r\n    @GetMapping(\"/initEdit/{salaryId}\")\r\n    public AjaxResult initEdit(@PathVariable(\"salaryId\") Integer salaryId) {\r\n        return success(salaryHistoryService.selectSalaryHistoryByHisId(salaryId));\r\n    }\r\n\r\n    /**\r\n     * 薪资变动数据统计,返回页面的数据如下\r\n     * numberRiseThisyear:今年升薪的人数\r\n     * AmountRiseThisyear:今年升薪的金额\r\n     * numberFallThisyear:今年降薪的人数\r\n     * AmountFallThisyear:今年降薪的金额\r\n     * riseYearsArray:近几年升薪的年份\r\n     * riseNumArray：近几年升薪的人数\r\n     * riseAmountArray：近几年升薪的金额\r\n     * fallYearsArray：近几年降薪的年份\r\n     * fallNumArray：近几年降薪的人数\r\n     * fallAmountArray：近几年降薪的金额\r\n     */\r\n    @ApiOperation(\"薪资变动数据统计,包括：升降薪人数，金额，近几年变化\")\r\n    @PreAuthorize(\"@ss.hasPermi('labor:salaryhis:query')\")\r\n    @GetMapping(\"/counting\")\r\n    public AjaxResult counting() {\r\n        AjaxResult ajax = AjaxResult.success();\r\n        ajax.put(\"numberRiseThisyear\", salaryHistoryService.countNumByChangeType(1));\r\n        ajax.put(\"AmountRiseThisyear\", salaryHistoryService.countAmountByChangeType(1));\r\n        ajax.put(\"numberFallThisyear\", salaryHistoryService.countNumByChangeType(2));\r\n        ajax.put(\"AmountFallThisyear\", salaryHistoryService.countAmountByChangeType(2));\r\n\r\n        List<ChartDataVO> countRiseByYears = salaryHistoryService.countAmountByRecentYears(1);\r\n        if (countRiseByYears != null) {\r\n            String[] riseYears = new String[countRiseByYears.size()];\r\n            Integer[] riseNums = new Integer[countRiseByYears.size()];\r\n            BigDecimal[] riseAmounts = new BigDecimal[countRiseByYears.size()];\r\n            for (int i = 0; i < countRiseByYears.size(); i++) {\r\n                ChartDataVO riseVO = countRiseByYears.get(i);\r\n                riseYears[i] = riseVO.getName();\r\n                riseNums[i] = riseVO.getNumval();\r\n                riseAmounts[i] = riseVO.getAmountval();\r\n            }\r\n            ajax.put(\"riseYearsArray\", riseYears);\r\n            ajax.put(\"riseNumArray\", riseNums);\r\n            ajax.put(\"riseAmountArray\", riseAmounts);\r\n        }\r\n\r\n        List<ChartDataVO> countFallByYears = salaryHistoryService.countAmountByRecentYears(2);\r\n        if (countFallByYears != null) {\r\n            String[] fallYears = new String[countFallByYears.size()];\r\n            Integer[] fallNums = new Integer[countFallByYears.size()];\r\n            BigDecimal[] fallAmounts = new BigDecimal[countFallByYears.size()];\r\n            for (int i = 0; i < countFallByYears.size(); i++) {\r\n                ChartDataVO fallVO = countFallByYears.get(i);\r\n                fallYears[i] = fallVO.getName();\r\n                fallNums[i] = fallVO.getNumval();\r\n                fallAmounts[i] = fallVO.getAmountval();\r\n            }\r\n            ajax.put(\"fallYearsArray\", fallYears);\r\n            ajax.put(\"fallNumArray\", fallNums);\r\n            ajax.put(\"fallAmountArray\", fallAmounts);\r\n        }\r\n\r\n\r\n        return ajax;\r\n    }\r\n\r\n    /**\r\n     * 下载薪酬变动情况模板\r\n     *\r\n     * @param response\r\n     */\r\n    @ApiOperation(value = \"下载薪酬变动情况模板\")\r\n    //@PreAuthorize(\"@ss.hasPermi('labor:salaryhis:import')\")\r\n    @GetMapping(\"/excel/download\")\r\n    public void downloadExcel(HttpServletResponse response) {\r\n        try {\r\n            trainProjectService.downloadExcel(response, \"salaryHistory.xlsx\");\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 导入薪酬变动情况数据\r\n     *\r\n     * @param file\r\n     * @return\r\n     */\r\n    @ApiOperation(\"导入薪酬变动情况数据\")\r\n    //@PreAuthorize(\"@ss.hasPermi('labor:salaryhis:import')\")\r\n    @PostMapping(\"/importData\")\r\n    public AjaxResult importData(MultipartFile file) {\r\n\r\n        LoginUser loginUser = getLoginUser();\r\n        return success(salaryHistoryService.importSalaryHisData(file, loginUser));\r\n    }\r\n\r\n    /**\r\n     * 直接导出薪酬变化历史信息\r\n     *\r\n     * @param response\r\n     * @param salaryHisExport\r\n     */\r\n    @ApiOperation(\"直接导出薪酬变动历史信息\")\r\n    //@PreAuthorize(\"@ss.hasPermi('labor:salaryhis:export')\")\r\n    @Log(title = \"薪资变动\", businessType = BusinessType.EXPORT)\r\n    @PostMapping(\"/export\")\r\n    public void export(HttpServletResponse response, @RequestBody SalaryHisExportVO salaryHisExport) {\r\n        List<SalaryHistory> list = salaryHistoryService.selectSalaryHisExportInfos(salaryHisExport);\r\n        ExcelUtil<SalaryHistory> util = new ExcelUtil<>(SalaryHistory.class);\r\n        Field[] declaredFields = SalaryHistory.class.getDeclaredFields();\r\n        List<String> fieldNamesWithExcel = new ArrayList<>();\r\n        for (Field field : declaredFields) {\r\n            ReflectionUtils.makeAccessible(field);\r\n            if (field.isAnnotationPresent(Excel.class)) {\r\n                fieldNamesWithExcel.add(field.getName());\r\n            }\r\n        }\r\n        List<String> excludeFieldNames = new ArrayList<>();\r\n        List<String> fieldNames = salaryHisExport.getFieldNames();\r\n\r\n        if (fieldNames != null && fieldNames.size() > 0) {\r\n            for (String s : fieldNamesWithExcel) {\r\n                if (!fieldNames.contains(s)) {\r\n                    excludeFieldNames.add(s);\r\n                }\r\n            }\r\n            if (!CollectionUtils.isEmpty(excludeFieldNames)) {\r\n                String[] excludeArr = new String[excludeFieldNames.size()];\r\n                excludeFieldNames.toArray(excludeArr);\r\n                util.hideColumn(excludeArr);\r\n            }\r\n        }\r\n\r\n\r\n        util.exportExcel(response, list, \"薪酬变动数据\");\r\n    }\r\n\r\n\r\n    /**\r\n     * 表格拆分导出员工信息\r\n     */\r\n    @ApiOperation(\"表格拆分导出员工培训信息\")\r\n    //@PreAuthorize(\"@ss.hasPermi('labor:salaryhis:export')\")\r\n    @Log(title = \"培训项目\", businessType = BusinessType.EXPORT)\r\n    @PostMapping(\"/export/divide\")\r\n    public void exportDivide(HttpServletResponse response, @RequestBody SalaryHisExportDivideVO salaryHisExportDivide) {\r\n        salaryHistoryService.exportDivide(response, salaryHisExportDivide);\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/laborBackend-admin/src/main/java/com/yuantu/web/controller/labor/SalaryHistoryController.java b/laborBackend-admin/src/main/java/com/yuantu/web/controller/labor/SalaryHistoryController.java
--- a/laborBackend-admin/src/main/java/com/yuantu/web/controller/labor/SalaryHistoryController.java	(revision aa62bc6d0c2f0b21cd307df5288b5de5dd2479e7)
+++ b/laborBackend-admin/src/main/java/com/yuantu/web/controller/labor/SalaryHistoryController.java	(date 1700191443336)
@@ -146,7 +146,7 @@
     }
 
     @ApiOperation("初始化修改页面，返回员工修改历史记录")
-    @PreAuthorize("@ss.hasPermi('labor:salaryhis:query')")
+    //@PreAuthorize("@ss.hasPermi('labor:salaryhis:query')")
     @GetMapping("/initEdit/{salaryId}")
     public AjaxResult initEdit(@PathVariable("salaryId") Integer salaryId) {
         return success(salaryHistoryService.selectSalaryHistoryByHisId(salaryId));
