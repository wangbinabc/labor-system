Index: laborBackend-admin/src/main/java/com/yuantu/web/controller/labor/SalaryHistoryController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.yuantu.web.controller.labor;\r\n\r\nimport com.yuantu.common.annotation.Excel;\r\nimport com.yuantu.common.annotation.Log;\r\nimport com.yuantu.common.core.controller.BaseController;\r\nimport com.yuantu.common.core.domain.AjaxResult;\r\nimport com.yuantu.common.core.domain.model.LoginUser;\r\nimport com.yuantu.common.core.page.TableDataInfo;\r\nimport com.yuantu.common.enums.BusinessType;\r\nimport com.yuantu.common.utils.poi.ExcelUtil;\r\nimport com.yuantu.labor.domain.Employee;\r\nimport com.yuantu.labor.domain.SalaryHistory;\r\nimport com.yuantu.labor.service.IEmployeeService;\r\nimport com.yuantu.labor.service.ISalaryHistoryService;\r\nimport com.yuantu.labor.service.ITrainProjectService;\r\nimport com.yuantu.labor.vo.*;\r\nimport io.swagger.annotations.Api;\r\nimport io.swagger.annotations.ApiOperation;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.security.access.prepost.PreAuthorize;\r\nimport org.springframework.util.CollectionUtils;\r\nimport org.springframework.util.ReflectionUtils;\r\nimport org.springframework.web.bind.annotation.*;\r\nimport org.springframework.web.multipart.MultipartFile;\r\n\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport java.lang.reflect.Field;\r\nimport java.math.BigDecimal;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n/**\r\n * 薪级变动Controller\r\n *\r\n * @author ruoyi\r\n * @date 2023-10-07\r\n */\r\n@Api(\"薪级变动管理\")\r\n@RestController\r\n@RequestMapping(\"/labor/salaryhis\")\r\npublic class SalaryHistoryController extends BaseController {\r\n    @Autowired\r\n    private ISalaryHistoryService salaryHistoryService;\r\n    @Autowired\r\n    private IEmployeeService employeeService;\r\n    @Autowired\r\n    private ITrainProjectService trainProjectService;\r\n\r\n    /**\r\n     * 查询薪级变动列表\r\n     */\r\n    @ApiOperation(\"查询薪级变动列表\")\r\n    @PreAuthorize(\"@ss.hasPermi('labor:salaryhis:list')\")\r\n    @GetMapping(\"/list\")\r\n    public TableDataInfo list(SalaryHisQueryVO vo) {\r\n        startPage();\r\n        List<SalaryHistory> list = salaryHistoryService.selectSalaryHistoryList(vo);\r\n        return getDataTable(list);\r\n    }\r\n\r\n\r\n    /**\r\n     * 导出薪级变动列表\r\n\r\n     @ApiOperation(\"导出薪级变动列表\")\r\n     //@PreAuthorize(\"@ss.hasPermi('labor:salaryhis:export')\")\r\n     @Log(title = \"薪级变动\", businessType = BusinessType.EXPORT)\r\n     @PostMapping(\"/export/{hisIds}\") public void export(HttpServletResponse response, @PathVariable Integer[] hisIds)\r\n     {\r\n     SalaryHisQueryVO vo = new SalaryHisQueryVO();\r\n     vo.setHisIds(hisIds);\r\n     List<SalaryHistory> list = salaryHistoryService.selectSalaryHistoryList(vo);\r\n     ExcelUtil<SalaryHistory> util = new ExcelUtil<SalaryHistory>(SalaryHistory.class);\r\n     util.exportExcel(response, list, \"薪级变动数据\");\r\n     }\r\n     */\r\n    /**\r\n     * 获取薪级变动详细信息\r\n     */\r\n    @ApiOperation(\"获取薪级变动详细信息\")\r\n    @PreAuthorize(\"@ss.hasPermi('labor:salaryhis:query')\")\r\n    @GetMapping(value = \"/getInfo/{hisId}\")\r\n    public AjaxResult getInfo(@PathVariable(\"hisId\") Integer hisId) {\r\n        return success(salaryHistoryService.selectSalaryHistoryByHisId(hisId));\r\n    }\r\n\r\n    /**\r\n     * 新增薪级变动\r\n     */\r\n    @ApiOperation(\"新增薪级变动\")\r\n    @PreAuthorize(\"@ss.hasPermi('labor:salaryhis:add')\")\r\n    @Log(title = \"薪级变动\", businessType = BusinessType.INSERT)\r\n    @PostMapping(\"/add\")\r\n    public AjaxResult add(@RequestBody SalaryHistory salaryHistory) {\r\n        Employee emp = employeeService.selectEmployeeByEmpId(salaryHistory.getHisEmpId());\r\n        emp.setEmpSalaryLevel(salaryHistory.getHisNextLevel());\r\n        salaryHistory.setHisEmpIdcard(emp.getEmpIdcard());\r\n        salaryHistory.setHisEmpName(emp.getEmpName());\r\n\r\n        int result = salaryHistoryService.checkSalaryHisUnique(salaryHistory);\r\n        if (result > 0) {\r\n            return error(\"增加\" + salaryHistory.getHisEmpName() + \"的\" + salaryHistory.getHisYearMonth() + \"薪资变动失败，该月薪酬变动数据已经存在\");\r\n\r\n        }\r\n        return toAjax(salaryHistoryService.insertSalaryHistory(salaryHistory, emp));\r\n    }\r\n\r\n    /**\r\n     * 修改薪级变动\r\n     */\r\n    @ApiOperation(\"修改薪级变动\")\r\n    @PreAuthorize(\"@ss.hasPermi('labor:salaryhis:edit')\")\r\n    @Log(title = \"薪级变动\", businessType = BusinessType.UPDATE)\r\n    @PutMapping(\"/edit\")\r\n    public AjaxResult edit(@RequestBody SalaryHistory salaryHistory) {\r\n        return toAjax(salaryHistoryService.updateSalaryHistory(salaryHistory));\r\n    }\r\n\r\n    /**\r\n     * 删除薪级变动\r\n     */\r\n    @ApiOperation(\"删除薪级变动\")\r\n    @PreAuthorize(\"@ss.hasPermi('labor:salaryhis:remove')\")\r\n    @Log(title = \"薪级变动\", businessType = BusinessType.DELETE)\r\n    @DeleteMapping(\"/remove/{hisIds}\")\r\n    public AjaxResult remove(@PathVariable Integer[] hisIds) {\r\n        return toAjax(salaryHistoryService.deleteSalaryHistoryByHisIds(hisIds));\r\n    }\r\n\r\n    @ApiOperation(\" 初始化新增页面，返回员工列表\")\r\n    @PreAuthorize(\"@ss.hasPermi('labor:salaryhis:query')\")\r\n    @GetMapping(\"/initAdd\")\r\n    public AjaxResult initAdd() {\r\n        AjaxResult ajax = AjaxResult.success();\r\n        EmployeeInfoVO infoVO = new EmployeeInfoVO();\r\n        List<String> statusList = new ArrayList<>();\r\n        statusList.add(\"1\");\r\n        statusList.add(\"2\");\r\n        statusList.add(\"5\");\r\n        statusList.add(\"6\");\r\n        statusList.add(\"7\");\r\n        infoVO.setEmpStatusList(statusList);\r\n        List<EmpNameCardVO> empNameCardList = employeeService.selectEmpNameAndCard(infoVO);\r\n        ajax.put(\"empNameAndCardData\", empNameCardList);\r\n        return ajax;\r\n    }\r\n\r\n    @ApiOperation(\"初始化修改页面，返回员工修改历史记录\")\r\n    @PreAuthorize(\"@ss.hasPermi('labor:salaryhis:query')\")\r\n    @GetMapping(\"/initEdit/{salaryId}\")\r\n    public AjaxResult initEdit(@PathVariable(\"salaryId\") Integer salaryId) {\r\n        return success(salaryHistoryService.selectSalaryHistoryByHisId(salaryId));\r\n    }\r\n\r\n    /**\r\n     * 薪资变动数据统计,返回页面的数据如下\r\n     * numberRiseThisyear:今年升薪的人数\r\n     * AmountRiseThisyear:今年升薪的金额\r\n     * numberFallThisyear:今年降薪的人数\r\n     * AmountFallThisyear:今年降薪的金额\r\n     * riseYearsArray:近几年升薪的年份\r\n     * riseNumArray：近几年升薪的人数\r\n     * riseAmountArray：近几年升薪的金额\r\n     * fallYearsArray：近几年降薪的年份\r\n     * fallNumArray：近几年降薪的人数\r\n     * fallAmountArray：近几年降薪的金额\r\n     */\r\n    @ApiOperation(\"薪资变动数据统计,包括：升降薪人数，金额，近几年变化\")\r\n    @PreAuthorize(\"@ss.hasPermi('labor:salaryhis:query')\")\r\n    @GetMapping(\"/counting\")\r\n    public AjaxResult counting() {\r\n        AjaxResult ajax = AjaxResult.success();\r\n        ajax.put(\"numberRiseThisyear\", salaryHistoryService.countNumByChangeType(1));\r\n        ajax.put(\"AmountRiseThisyear\", salaryHistoryService.countAmountByChangeType(1));\r\n        ajax.put(\"numberFallThisyear\", salaryHistoryService.countNumByChangeType(2));\r\n        ajax.put(\"AmountFallThisyear\", salaryHistoryService.countAmountByChangeType(2));\r\n\r\n        List<ChartDataVO> countRiseByYears = salaryHistoryService.countAmountByRecentYears(1);\r\n        if (countRiseByYears != null) {\r\n            String[] riseYears = new String[countRiseByYears.size()];\r\n            Integer[] riseNums = new Integer[countRiseByYears.size()];\r\n            BigDecimal[] riseAmounts = new BigDecimal[countRiseByYears.size()];\r\n            for (int i = 0; i < countRiseByYears.size(); i++) {\r\n                ChartDataVO riseVO = countRiseByYears.get(i);\r\n                riseYears[i] = riseVO.getName();\r\n                riseNums[i] = riseVO.getNumval();\r\n                riseAmounts[i] = riseVO.getAmountval();\r\n            }\r\n            ajax.put(\"riseYearsArray\", riseYears);\r\n            ajax.put(\"riseNumArray\", riseNums);\r\n            ajax.put(\"riseAmountArray\", riseAmounts);\r\n        }\r\n\r\n        List<ChartDataVO> countFallByYears = salaryHistoryService.countAmountByRecentYears(2);\r\n        if (countFallByYears != null) {\r\n            String[] fallYears = new String[countFallByYears.size()];\r\n            Integer[] fallNums = new Integer[countFallByYears.size()];\r\n            BigDecimal[] fallAmounts = new BigDecimal[countFallByYears.size()];\r\n            for (int i = 0; i < countFallByYears.size(); i++) {\r\n                ChartDataVO fallVO = countFallByYears.get(i);\r\n                fallYears[i] = fallVO.getName();\r\n                fallNums[i] = fallVO.getNumval();\r\n                fallAmounts[i] = fallVO.getAmountval();\r\n            }\r\n            ajax.put(\"fallYearsArray\", fallYears);\r\n            ajax.put(\"fallNumArray\", fallNums);\r\n            ajax.put(\"fallAmountArray\", fallAmounts);\r\n        }\r\n\r\n\r\n        return ajax;\r\n    }\r\n\r\n    /**\r\n     * 下载薪酬变动情况模板\r\n     *\r\n     * @param response\r\n     */\r\n    @ApiOperation(value = \"下载薪酬变动情况模板\")\r\n    //@PreAuthorize(\"@ss.hasPermi('labor:salaryhis:import')\")\r\n    @GetMapping(\"/excel/download\")\r\n    public void downloadExcel(HttpServletResponse response) {\r\n        try {\r\n            trainProjectService.downloadExcel(response, \"salaryHistory.xlsx\");\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 导入薪酬变动情况数据\r\n     *\r\n     * @param file\r\n     * @return\r\n     */\r\n    @ApiOperation(\"导入薪酬变动情况数据\")\r\n    //@PreAuthorize(\"@ss.hasPermi('labor:salaryhis:import')\")\r\n    @PostMapping(\"/importData\")\r\n    public AjaxResult importData(MultipartFile file) {\r\n\r\n        LoginUser loginUser = getLoginUser();\r\n        return success(salaryHistoryService.importSalaryHisData(file, loginUser));\r\n    }\r\n\r\n    /**\r\n     * 直接导出薪酬变化历史信息\r\n     *\r\n     * @param response\r\n     * @param salaryHisExport\r\n     */\r\n    @ApiOperation(\"直接导出薪酬变动历史信息\")\r\n    //@PreAuthorize(\"@ss.hasPermi('labor:salaryhis:export')\")\r\n    @Log(title = \"薪资变动\", businessType = BusinessType.EXPORT)\r\n    @PostMapping(\"/export\")\r\n    public void export(HttpServletResponse response, @RequestBody SalaryHisExportVO salaryHisExport) {\r\n        List<SalaryHistory> list = salaryHistoryService.selectSalaryHisExportInfos(salaryHisExport);\r\n        ExcelUtil<SalaryHistory> util = new ExcelUtil<>(SalaryHistory.class);\r\n        Field[] declaredFields = SalaryHistory.class.getDeclaredFields();\r\n        List<String> fieldNamesWithExcel = new ArrayList<>();\r\n        for (Field field : declaredFields) {\r\n            ReflectionUtils.makeAccessible(field);\r\n            if (field.isAnnotationPresent(Excel.class)) {\r\n                fieldNamesWithExcel.add(field.getName());\r\n            }\r\n        }\r\n        List<String> excludeFieldNames = new ArrayList<>();\r\n        List<String> fieldNames = salaryHisExport.getFieldNames();\r\n\r\n        if (fieldNames != null && fieldNames.size() > 0) {\r\n            for (String s : fieldNamesWithExcel) {\r\n                if (!fieldNames.contains(s)) {\r\n                    excludeFieldNames.add(s);\r\n                }\r\n            }\r\n            if (!CollectionUtils.isEmpty(excludeFieldNames)) {\r\n                String[] excludeArr = new String[excludeFieldNames.size()];\r\n                excludeFieldNames.toArray(excludeArr);\r\n                util.hideColumn(excludeArr);\r\n            }\r\n        }\r\n\r\n\r\n        util.exportExcel(response, list, \"薪酬变动数据\");\r\n    }\r\n\r\n\r\n    /**\r\n     * 表格拆分导出员工信息\r\n     */\r\n    @ApiOperation(\"表格拆分导出员工培训信息\")\r\n    //@PreAuthorize(\"@ss.hasPermi('labor:salaryhis:export')\")\r\n    @Log(title = \"培训项目\", businessType = BusinessType.EXPORT)\r\n    @PostMapping(\"/export/divide\")\r\n    public void exportDivide(HttpServletResponse response, @RequestBody SalaryHisExportDivideVO salaryHisExportDivide) {\r\n        salaryHistoryService.exportDivide(response, salaryHisExportDivide);\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/laborBackend-admin/src/main/java/com/yuantu/web/controller/labor/SalaryHistoryController.java b/laborBackend-admin/src/main/java/com/yuantu/web/controller/labor/SalaryHistoryController.java
--- a/laborBackend-admin/src/main/java/com/yuantu/web/controller/labor/SalaryHistoryController.java	(revision 82a82ce920b526aab2023eb6f99a3fd257457dc2)
+++ b/laborBackend-admin/src/main/java/com/yuantu/web/controller/labor/SalaryHistoryController.java	(date 1700127402751)
@@ -50,7 +50,7 @@
      * 查询薪级变动列表
      */
     @ApiOperation("查询薪级变动列表")
-    @PreAuthorize("@ss.hasPermi('labor:salaryhis:list')")
+    //@PreAuthorize("@ss.hasPermi('labor:salaryhis:list')")
     @GetMapping("/list")
     public TableDataInfo list(SalaryHisQueryVO vo) {
         startPage();
Index: laborBackend-framework/src/main/java/com/yuantu/framework/config/SecurityConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.yuantu.framework.config;\r\n\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.http.HttpMethod;\r\nimport org.springframework.security.authentication.AuthenticationManager;\r\nimport org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\r\nimport org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;\r\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\r\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\r\nimport org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer;\r\nimport org.springframework.security.config.http.SessionCreationPolicy;\r\nimport org.springframework.security.core.userdetails.UserDetailsService;\r\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\r\nimport org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;\r\nimport org.springframework.security.web.authentication.logout.LogoutFilter;\r\nimport org.springframework.web.filter.CorsFilter;\r\nimport com.yuantu.framework.config.properties.PermitAllUrlProperties;\r\nimport com.yuantu.framework.security.filter.JwtAuthenticationTokenFilter;\r\nimport com.yuantu.framework.security.handle.AuthenticationEntryPointImpl;\r\nimport com.yuantu.framework.security.handle.LogoutSuccessHandlerImpl;\r\n\r\n/**\r\n * spring security配置\r\n * \r\n * @author ruoyi\r\n */\r\n@EnableGlobalMethodSecurity(prePostEnabled = true, securedEnabled = true)\r\npublic class SecurityConfig extends WebSecurityConfigurerAdapter\r\n{\r\n    /**\r\n     * 自定义用户认证逻辑\r\n     */\r\n    @Autowired\r\n    private UserDetailsService userDetailsService;\r\n    \r\n    /**\r\n     * 认证失败处理类\r\n     */\r\n    @Autowired\r\n    private AuthenticationEntryPointImpl unauthorizedHandler;\r\n\r\n    /**\r\n     * 退出处理类\r\n     */\r\n    @Autowired\r\n    private LogoutSuccessHandlerImpl logoutSuccessHandler;\r\n\r\n    /**\r\n     * token认证过滤器\r\n     */\r\n    @Autowired\r\n    private JwtAuthenticationTokenFilter authenticationTokenFilter;\r\n    \r\n    /**\r\n     * 跨域过滤器\r\n     */\r\n    @Autowired\r\n    private CorsFilter corsFilter;\r\n\r\n    /**\r\n     * 允许匿名访问的地址\r\n     */\r\n    @Autowired\r\n    private PermitAllUrlProperties permitAllUrl;\r\n\r\n    /**\r\n     * 解决 无法直接注入 AuthenticationManager\r\n     *\r\n     * @return\r\n     * @throws Exception\r\n     */\r\n    @Bean\r\n    @Override\r\n    public AuthenticationManager authenticationManagerBean() throws Exception\r\n    {\r\n        return super.authenticationManagerBean();\r\n    }\r\n\r\n    /**\r\n     * anyRequest          |   匹配所有请求路径\r\n     * access              |   SpringEl表达式结果为true时可以访问\r\n     * anonymous           |   匿名可以访问\r\n     * denyAll             |   用户不能访问\r\n     * fullyAuthenticated  |   用户完全认证可以访问（非remember-me下自动登录）\r\n     * hasAnyAuthority     |   如果有参数，参数表示权限，则其中任何一个权限可以访问\r\n     * hasAnyRole          |   如果有参数，参数表示角色，则其中任何一个角色可以访问\r\n     * hasAuthority        |   如果有参数，参数表示权限，则其权限可以访问\r\n     * hasIpAddress        |   如果有参数，参数表示IP地址，如果用户IP和参数匹配，则可以访问\r\n     * hasRole             |   如果有参数，参数表示角色，则其角色可以访问\r\n     * permitAll           |   用户可以任意访问\r\n     * rememberMe          |   允许通过remember-me登录的用户访问\r\n     * authenticated       |   用户登录后可访问\r\n     */\r\n    @Override\r\n    protected void configure(HttpSecurity httpSecurity) throws Exception\r\n    {\r\n        // 注解标记允许匿名访问的url\r\n        ExpressionUrlAuthorizationConfigurer<HttpSecurity>.ExpressionInterceptUrlRegistry registry = httpSecurity.authorizeRequests();\r\n        permitAllUrl.getUrls().forEach(url -> registry.antMatchers(url).permitAll());\r\n\r\n        httpSecurity\r\n                // CSRF禁用，因为不使用session\r\n                .csrf().disable()\r\n                // 禁用HTTP响应标头\r\n                .headers().cacheControl().disable().and()\r\n                // 认证失败处理类\r\n                .exceptionHandling().authenticationEntryPoint(unauthorizedHandler).and()\r\n                // 基于token，所以不需要session\r\n                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and()\r\n                // 过滤请求\r\n                .authorizeRequests()\r\n                // 对于登录login 注册register 验证码captchaImage 允许匿名访问\r\n                .antMatchers(\"/login\", \"/register\", \"/captchaImage\").permitAll()\r\n                // 静态资源，可匿名访问\r\n                .antMatchers(HttpMethod.GET, \"/\", \"/*.html\", \"/**/*.html\", \"/**/*.css\", \"/**/*.js\", \"/profile/**\").permitAll()\r\n                .antMatchers(\"/swagger-ui.html\", \"/swagger-resources/**\", \"/webjars/**\", \"/*/api-docs\", \"/druid/**\").permitAll()\r\n              //  .antMatchers(\"/labor/**\").permitAll()\r\n                // 除上面外的所有请求全部需要鉴权认证\r\n                .anyRequest().authenticated()\r\n                .and()\r\n                .headers().frameOptions().disable();\r\n        // 添加Logout filter\r\n        httpSecurity.logout().logoutUrl(\"/logout\").logoutSuccessHandler(logoutSuccessHandler);\r\n        // 添加JWT filter\r\n        httpSecurity.addFilterBefore(authenticationTokenFilter, UsernamePasswordAuthenticationFilter.class);\r\n        // 添加CORS filter\r\n        httpSecurity.addFilterBefore(corsFilter, JwtAuthenticationTokenFilter.class);\r\n        httpSecurity.addFilterBefore(corsFilter, LogoutFilter.class);\r\n    }\r\n\r\n    /**\r\n     * 强散列哈希加密实现\r\n     */\r\n    @Bean\r\n    public BCryptPasswordEncoder bCryptPasswordEncoder()\r\n    {\r\n        return new BCryptPasswordEncoder();\r\n    }\r\n\r\n    /**\r\n     * 身份认证接口\r\n     */\r\n    @Override\r\n    protected void configure(AuthenticationManagerBuilder auth) throws Exception\r\n    {\r\n        auth.userDetailsService(userDetailsService).passwordEncoder(bCryptPasswordEncoder());\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/laborBackend-framework/src/main/java/com/yuantu/framework/config/SecurityConfig.java b/laborBackend-framework/src/main/java/com/yuantu/framework/config/SecurityConfig.java
--- a/laborBackend-framework/src/main/java/com/yuantu/framework/config/SecurityConfig.java	(revision 82a82ce920b526aab2023eb6f99a3fd257457dc2)
+++ b/laborBackend-framework/src/main/java/com/yuantu/framework/config/SecurityConfig.java	(date 1700127425683)
@@ -115,7 +115,7 @@
                 // 静态资源，可匿名访问
                 .antMatchers(HttpMethod.GET, "/", "/*.html", "/**/*.html", "/**/*.css", "/**/*.js", "/profile/**").permitAll()
                 .antMatchers("/swagger-ui.html", "/swagger-resources/**", "/webjars/**", "/*/api-docs", "/druid/**").permitAll()
-              //  .antMatchers("/labor/**").permitAll()
+                .antMatchers("/labor/**").permitAll()
                 // 除上面外的所有请求全部需要鉴权认证
                 .anyRequest().authenticated()
                 .and()
